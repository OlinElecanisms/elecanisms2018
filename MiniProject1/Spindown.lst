
Spindown.elf:     file format elf32-pic30

Disassembly of section .aivt._AltADC1Interrupt:

0000012e <.aivt._AltADC1Interrupt>:
 12e:	94 1f 00    	nop       
Disassembly of section .aivt._AltAddressError:

00000108 <.aivt._AltAddressError>:
 108:	94 1f 00    	nop       
Disassembly of section .aivt._AltCNInterrupt:

0000013a <.aivt._AltCNInterrupt>:
 13a:	94 1f 00    	nop       
Disassembly of section .aivt._AltCRCInterrupt:

0000019a <.aivt._AltCRCInterrupt>:
 19a:	94 1f 00    	nop       
Disassembly of section .aivt._AltCTMUInterrupt:

000001ae <.aivt._AltCTMUInterrupt>:
 1ae:	94 1f 00    	nop       
Disassembly of section .aivt._AltCompInterrupt:

00000138 <.aivt._AltCompInterrupt>:
 138:	94 1f 00    	nop       
Disassembly of section .aivt._AltIC1Interrupt:

00000116 <.aivt._AltIC1Interrupt>:
 116:	94 1f 00    	nop       
Disassembly of section .aivt._AltIC2Interrupt:

0000011e <.aivt._AltIC2Interrupt>:
 11e:	94 1f 00    	nop       
Disassembly of section .aivt._AltIC3Interrupt:

0000015e <.aivt._AltIC3Interrupt>:
 15e:	94 1f 00    	nop       
Disassembly of section .aivt._AltIC4Interrupt:

00000160 <.aivt._AltIC4Interrupt>:
 160:	94 1f 00    	nop       
Disassembly of section .aivt._AltIC5Interrupt:

00000162 <.aivt._AltIC5Interrupt>:
 162:	94 1f 00    	nop       
Disassembly of section .aivt._AltIC6Interrupt:

00000164 <.aivt._AltIC6Interrupt>:
 164:	94 1f 00    	nop       
Disassembly of section .aivt._AltIC7Interrupt:

00000140 <.aivt._AltIC7Interrupt>:
 140:	94 1f 00    	nop       
Disassembly of section .aivt._AltIC8Interrupt:

00000142 <.aivt._AltIC8Interrupt>:
 142:	94 1f 00    	nop       
Disassembly of section .aivt._AltIC9Interrupt:

000001ce <.aivt._AltIC9Interrupt>:
 1ce:	94 1f 00    	nop       
Disassembly of section .aivt._AltINT0Interrupt:

00000114 <.aivt._AltINT0Interrupt>:
 114:	94 1f 00    	nop       
Disassembly of section .aivt._AltINT1Interrupt:

0000013c <.aivt._AltINT1Interrupt>:
 13c:	94 1f 00    	nop       
Disassembly of section .aivt._AltINT2Interrupt:

0000014e <.aivt._AltINT2Interrupt>:
 14e:	94 1f 00    	nop       
Disassembly of section .aivt._AltINT3Interrupt:

0000017e <.aivt._AltINT3Interrupt>:
 17e:	94 1f 00    	nop       
Disassembly of section .aivt._AltINT4Interrupt:

00000180 <.aivt._AltINT4Interrupt>:
 180:	94 1f 00    	nop       
Disassembly of section .aivt._AltInterrupt14:

00000130 <.aivt._AltInterrupt14>:
 130:	94 1f 00    	nop       
Disassembly of section .aivt._AltInterrupt15:

00000132 <.aivt._AltInterrupt15>:
 132:	94 1f 00    	nop       
Disassembly of section .aivt._AltInterrupt21:

0000013e <.aivt._AltInterrupt21>:
 13e:	94 1f 00    	nop       
Disassembly of section .aivt._AltInterrupt24:

00000144 <.aivt._AltInterrupt24>:
 144:	94 1f 00    	nop       
Disassembly of section .aivt._AltInterrupt34:

00000158 <.aivt._AltInterrupt34>:
 158:	94 1f 00    	nop       
Disassembly of section .aivt._AltInterrupt35:

0000015a <.aivt._AltInterrupt35>:
 15a:	94 1f 00    	nop       
Disassembly of section .aivt._AltInterrupt36:

0000015c <.aivt._AltInterrupt36>:
 15c:	94 1f 00    	nop       
Disassembly of section .aivt._AltInterrupt4:

0000011c <.aivt._AltInterrupt4>:
 11c:	94 1f 00    	nop       
Disassembly of section .aivt._AltInterrupt46:

00000170 <.aivt._AltInterrupt46>:
 170:	94 1f 00    	nop       
Disassembly of section .aivt._AltInterrupt47:

00000172 <.aivt._AltInterrupt47>:
 172:	94 1f 00    	nop       
Disassembly of section .aivt._AltInterrupt48:

00000174 <.aivt._AltInterrupt48>:
 174:	94 1f 00    	nop       
Disassembly of section .aivt._AltInterrupt51:

0000017a <.aivt._AltInterrupt51>:
 17a:	94 1f 00    	nop       
Disassembly of section .aivt._AltInterrupt52:

0000017c <.aivt._AltInterrupt52>:
 17c:	94 1f 00    	nop       
Disassembly of section .aivt._AltInterrupt55:

00000182 <.aivt._AltInterrupt55>:
 182:	94 1f 00    	nop       
Disassembly of section .aivt._AltInterrupt56:

00000184 <.aivt._AltInterrupt56>:
 184:	94 1f 00    	nop       
Disassembly of section .aivt._AltInterrupt57:

00000186 <.aivt._AltInterrupt57>:
 186:	94 1f 00    	nop       
Disassembly of section .aivt._AltInterrupt58:

00000188 <.aivt._AltInterrupt58>:
 188:	94 1f 00    	nop       
Disassembly of section .aivt._AltInterrupt59:

0000018a <.aivt._AltInterrupt59>:
 18a:	94 1f 00    	nop       
Disassembly of section .aivt._AltInterrupt60:

0000018c <.aivt._AltInterrupt60>:
 18c:	94 1f 00    	nop       
Disassembly of section .aivt._AltInterrupt61:

0000018e <.aivt._AltInterrupt61>:
 18e:	94 1f 00    	nop       
Disassembly of section .aivt._AltInterrupt63:

00000192 <.aivt._AltInterrupt63>:
 192:	94 1f 00    	nop       
Disassembly of section .aivt._AltInterrupt64:

00000194 <.aivt._AltInterrupt64>:
 194:	94 1f 00    	nop       
Disassembly of section .aivt._AltInterrupt68:

0000019c <.aivt._AltInterrupt68>:
 19c:	94 1f 00    	nop       
Disassembly of section .aivt._AltInterrupt69:

0000019e <.aivt._AltInterrupt69>:
 19e:	94 1f 00    	nop       
Disassembly of section .aivt._AltInterrupt70:

000001a0 <.aivt._AltInterrupt70>:
 1a0:	94 1f 00    	nop       
Disassembly of section .aivt._AltInterrupt71:

000001a2 <.aivt._AltInterrupt71>:
 1a2:	94 1f 00    	nop       
Disassembly of section .aivt._AltInterrupt73:

000001a6 <.aivt._AltInterrupt73>:
 1a6:	94 1f 00    	nop       
Disassembly of section .aivt._AltInterrupt74:

000001a8 <.aivt._AltInterrupt74>:
 1a8:	94 1f 00    	nop       
Disassembly of section .aivt._AltInterrupt75:

000001aa <.aivt._AltInterrupt75>:
 1aa:	94 1f 00    	nop       
Disassembly of section .aivt._AltInterrupt76:

000001ac <.aivt._AltInterrupt76>:
 1ac:	94 1f 00    	nop       
Disassembly of section .aivt._AltInterrupt78:

000001b0 <.aivt._AltInterrupt78>:
 1b0:	94 1f 00    	nop       
Disassembly of section .aivt._AltInterrupt79:

000001b2 <.aivt._AltInterrupt79>:
 1b2:	94 1f 00    	nop       
Disassembly of section .aivt._AltInterrupt80:

000001b4 <.aivt._AltInterrupt80>:
 1b4:	94 1f 00    	nop       
Disassembly of section .aivt._AltLVDInterrupt:

000001a4 <.aivt._AltLVDInterrupt>:
 1a4:	94 1f 00    	nop       
Disassembly of section .aivt._AltMI2C1Interrupt:

00000136 <.aivt._AltMI2C1Interrupt>:
 136:	94 1f 00    	nop       
Disassembly of section .aivt._AltMI2C2Interrupt:

00000178 <.aivt._AltMI2C2Interrupt>:
 178:	94 1f 00    	nop       
Disassembly of section .aivt._AltMI2C3Interrupt:

000001be <.aivt._AltMI2C3Interrupt>:
 1be:	94 1f 00    	nop       
Disassembly of section .aivt._AltMathError:

0000010c <.aivt._AltMathError>:
 10c:	94 1f 00    	nop       
Disassembly of section .aivt._AltOC1Interrupt:

00000118 <.aivt._AltOC1Interrupt>:
 118:	94 1f 00    	nop       
Disassembly of section .aivt._AltOC2Interrupt:

00000120 <.aivt._AltOC2Interrupt>:
 120:	94 1f 00    	nop       
Disassembly of section .aivt._AltOC3Interrupt:

00000146 <.aivt._AltOC3Interrupt>:
 146:	94 1f 00    	nop       
Disassembly of section .aivt._AltOC4Interrupt:

00000148 <.aivt._AltOC4Interrupt>:
 148:	94 1f 00    	nop       
Disassembly of section .aivt._AltOC5Interrupt:

00000166 <.aivt._AltOC5Interrupt>:
 166:	94 1f 00    	nop       
Disassembly of section .aivt._AltOC6Interrupt:

00000168 <.aivt._AltOC6Interrupt>:
 168:	94 1f 00    	nop       
Disassembly of section .aivt._AltOC7Interrupt:

0000016a <.aivt._AltOC7Interrupt>:
 16a:	94 1f 00    	nop       
Disassembly of section .aivt._AltOC8Interrupt:

0000016c <.aivt._AltOC8Interrupt>:
 16c:	94 1f 00    	nop       
Disassembly of section .aivt._AltOC9Interrupt:

000001cc <.aivt._AltOC9Interrupt>:
 1cc:	94 1f 00    	nop       
Disassembly of section .aivt._AltOscillatorFail:

00000106 <.aivt._AltOscillatorFail>:
 106:	94 1f 00    	nop       
Disassembly of section .aivt._AltPMPInterrupt:

0000016e <.aivt._AltPMPInterrupt>:
 16e:	94 1f 00    	nop       
Disassembly of section .aivt._AltRTCCInterrupt:

00000190 <.aivt._AltRTCCInterrupt>:
 190:	94 1f 00    	nop       
Disassembly of section .aivt._AltReservedTrap0:

00000104 <.aivt._AltReservedTrap0>:
 104:	94 1f 00    	nop       
Disassembly of section .aivt._AltReservedTrap5:

0000010e <.aivt._AltReservedTrap5>:
 10e:	94 1f 00    	nop       
Disassembly of section .aivt._AltReservedTrap6:

00000110 <.aivt._AltReservedTrap6>:
 110:	94 1f 00    	nop       
Disassembly of section .aivt._AltReservedTrap7:

00000112 <.aivt._AltReservedTrap7>:
 112:	94 1f 00    	nop       
Disassembly of section .aivt._AltSI2C1Interrupt:

00000134 <.aivt._AltSI2C1Interrupt>:
 134:	94 1f 00    	nop       
Disassembly of section .aivt._AltSI2C2Interrupt:

00000176 <.aivt._AltSI2C2Interrupt>:
 176:	94 1f 00    	nop       
Disassembly of section .aivt._AltSI2C3Interrupt:

000001bc <.aivt._AltSI2C3Interrupt>:
 1bc:	94 1f 00    	nop       
Disassembly of section .aivt._AltSPI1ErrInterrupt:

00000126 <.aivt._AltSPI1ErrInterrupt>:
 126:	94 1f 00    	nop       
Disassembly of section .aivt._AltSPI1Interrupt:

00000128 <.aivt._AltSPI1Interrupt>:
 128:	94 1f 00    	nop       
Disassembly of section .aivt._AltSPI2ErrInterrupt:

00000154 <.aivt._AltSPI2ErrInterrupt>:
 154:	94 1f 00    	nop       
Disassembly of section .aivt._AltSPI2Interrupt:

00000156 <.aivt._AltSPI2Interrupt>:
 156:	94 1f 00    	nop       
Disassembly of section .aivt._AltSPI3ErrInterrupt:

000001c8 <.aivt._AltSPI3ErrInterrupt>:
 1c8:	94 1f 00    	nop       
Disassembly of section .aivt._AltSPI3Interrupt:

000001ca <.aivt._AltSPI3Interrupt>:
 1ca:	94 1f 00    	nop       
Disassembly of section .aivt._AltStackError:

0000010a <.aivt._AltStackError>:
 10a:	94 1f 00    	nop       
Disassembly of section .aivt._AltT1Interrupt:

0000011a <.aivt._AltT1Interrupt>:
 11a:	94 1f 00    	nop       
Disassembly of section .aivt._AltT2Interrupt:

00000122 <.aivt._AltT2Interrupt>:
 122:	94 1f 00    	nop       
Disassembly of section .aivt._AltT3Interrupt:

00000124 <.aivt._AltT3Interrupt>:
 124:	94 1f 00    	nop       
Disassembly of section .aivt._AltT4Interrupt:

0000014a <.aivt._AltT4Interrupt>:
 14a:	94 1f 00    	nop       
Disassembly of section .aivt._AltT5Interrupt:

0000014c <.aivt._AltT5Interrupt>:
 14c:	94 1f 00    	nop       
Disassembly of section .aivt._AltU1ErrInterrupt:

00000196 <.aivt._AltU1ErrInterrupt>:
 196:	94 1f 00    	nop       
Disassembly of section .aivt._AltU1RXInterrupt:

0000012a <.aivt._AltU1RXInterrupt>:
 12a:	94 1f 00    	nop       
Disassembly of section .aivt._AltU1TXInterrupt:

0000012c <.aivt._AltU1TXInterrupt>:
 12c:	94 1f 00    	nop       
Disassembly of section .aivt._AltU2ErrInterrupt:

00000198 <.aivt._AltU2ErrInterrupt>:
 198:	94 1f 00    	nop       
Disassembly of section .aivt._AltU2RXInterrupt:

00000150 <.aivt._AltU2RXInterrupt>:
 150:	94 1f 00    	nop       
Disassembly of section .aivt._AltU2TXInterrupt:

00000152 <.aivt._AltU2TXInterrupt>:
 152:	94 1f 00    	nop       
Disassembly of section .aivt._AltU3ErrInterrupt:

000001b6 <.aivt._AltU3ErrInterrupt>:
 1b6:	94 1f 00    	nop       
Disassembly of section .aivt._AltU3RXInterrupt:

000001b8 <.aivt._AltU3RXInterrupt>:
 1b8:	94 1f 00    	nop       
Disassembly of section .aivt._AltU3TXInterrupt:

000001ba <.aivt._AltU3TXInterrupt>:
 1ba:	94 1f 00    	nop       
Disassembly of section .aivt._AltU4ErrInterrupt:

000001c2 <.aivt._AltU4ErrInterrupt>:
 1c2:	94 1f 00    	nop       
Disassembly of section .aivt._AltU4RXInterrupt:

000001c4 <.aivt._AltU4RXInterrupt>:
 1c4:	94 1f 00    	nop       
Disassembly of section .aivt._AltU4TXInterrupt:

000001c6 <.aivt._AltU4TXInterrupt>:
 1c6:	94 1f 00    	nop       
Disassembly of section .aivt._AltUSB1Interrupt:

000001c0 <.aivt._AltUSB1Interrupt>:
 1c0:	94 1f 00    	nop       
Disassembly of section .reset:

00000000 <.reset>:
   0:	10 11 04    	goto      0x1110 <__reset>
   2:	00 00 00 
Disassembly of section .text:

00001110 <__reset>:
    1110:	0f a8 20    	mov.w     #0xa80, w15
    1112:	0e ff 27    	mov.w     #0x7ff0, w14
    1114:	0e 01 88    	mov.w     w14, 0x20
    1116:	00 00 00    	nop       
    1118:	00 00 20    	mov.w     #0x0, w0
    111a:	00 00 e0    	cp0.w     w0
    111c:	02 00 32    	bra       Z, 0x1122 <CORCON_RESET>
    111e:	00 01 20    	mov.w     #0x10, w0
    1120:	20 02 88    	mov.w     w0, 0x44

00001122 <CORCON_RESET>:
    1122:	14 00 07    	rcall     0x114c <__psv_init>
    1124:	7d 00 07    	rcall     0x1220 <__crt_start_mode> <__crt_start_mode_normal>
    1126:	00 00 e0    	cp0.w     w0
    1128:	03 00 3a    	bra       NZ, 0x1130 <L11>
    112a:	00 f8 21    	mov.w     #0x1f80, w0
    112c:	01 00 20    	mov.w     #0x0, w1
    112e:	02 00 37    	bra       0x1134 <L21>

00001130 <L11>:
    1130:	00 00 20    	mov.w     #0x0, w0
    1132:	01 00 20    	mov.w     #0x0, w1

00001134 <L21>:
    1134:	81 0f 70    	ior.w     w0, w1, [w15]
    1136:	01 00 32    	bra       Z, 0x113a <L12>
    1138:	14 00 07    	rcall     0x1162 <__data_init> <__data_init_da>

0000113a <L12>:
    113a:	00 00 20    	mov.w     #0x0, w0
    113c:	00 00 e0    	cp0.w     w0
    113e:	02 00 32    	bra       Z, 0x1144 <L13>
    1140:	00 00 02    	call      0x0 <__DEFAULT_VECTOR-0x110c>
    1142:	00 00 00 

00001144 <L13>:
    1144:	5e 1e 02    	call      0x1e5e <_main>
    1146:	00 00 00 
    1148:	00 40 da    	break     
    114a:	00 00 fe    	reset     

0000114c <__psv_init>:
    114c:	44 40 a9    	bclr.b    0x44, #0x2
    114e:	a0 06 20    	mov.w     #0x6a, w0
    1150:	00 00 e0    	cp0.w     w0
    1152:	03 00 32    	bra       Z, 0x115a <L14>
    1154:	00 20 20    	mov.w     #0x200, w0
    1156:	90 01 88    	mov.w     w0, 0x32
    1158:	44 40 a8    	bset.b    0x44, #0x2

0000115a <L14>:
    115a:	00 00 06    	return    

0000115c <__long_indirect_call>:
    115c:	8a 1f 78    	mov.w     w10, [w15++]
    115e:	8b 1f 78    	mov.w     w11, [w15++]
    1160:	00 00 06    	return    

00001162 <__data_init>:
    1162:	a1 02 88    	mov.w     w1, 0x54
    1164:	80 04 78    	mov.w     w0, w9
    1166:	00 00 eb    	clr.w     w0
    1168:	1f 00 37    	bra       0x11a8 <L41>

0000116a <L11>:
    116a:	e2 84 44    	add.w     w9, #0x2, w9
    116c:	54 a0 b4    	addc.w    0x54
    116e:	99 05 ba    	tblrdl.w  [w9], w11
    1170:	e2 84 44    	add.w     w9, #0x2, w9
    1172:	54 a0 b4    	addc.w    0x54
    1174:	99 06 ba    	tblrdl.w  [w9], w13
    1176:	e2 84 44    	add.w     w9, #0x2, w9
    1178:	54 a0 b4    	addc.w    0x54
    117a:	00 06 eb    	clr.w     w12
    117c:	47 6f de    	lsr.w     w13, #0x7, w14
    117e:	fd 07 b2    	and.w     #0x7f, w13
    1180:	ae 01 88    	mov.w     w14, 0x34
    1182:	63 6c e1    	cp.b      w13, #0x3
    1184:	03 00 3a    	bra       NZ, 0x118c <L21>
    1186:	ea ff 07    	rcall     0x115c <__long_indirect_call>
    1188:	00 00 eb    	clr.w     w0
    118a:	0e 00 37    	bra       0x11a8 <L41>

0000118c <L21>:
    118c:	60 6c e1    	cp.b      w13, #0x0
    118e:	08 00 3a    	bra       NZ, 0x11a0 <L22>

00001190 <L91>:
    1190:	00 4d eb    	clr.b     [w10]
    1192:	0a 05 e8    	inc.w     w10, w10
    1194:	02 00 39    	bra       NC, 0x119a <L81>
    1196:	34 20 ec    	inc.w     0x34
    1198:	0a f0 a0    	bset.w    w10, #0xf

0000119a <L81>:
    119a:	8b 05 e9    	dec.w     w11, w11
    119c:	f9 ff 3e    	bra       GTU, 0x1190 <L91>
    119e:	04 00 37    	bra       0x11a8 <L41>

000011a0 <L22>:
    11a0:	61 68 e1    	cp.w      w13, #0x1
    11a2:	01 00 32    	bra       Z, 0x11a6 <L31>
    11a4:	00 86 eb    	setm.w    w12

000011a6 <L31>:
    11a6:	0b 00 07    	rcall     0x11be <L13> <__memcpyd3extended>

000011a8 <L41>:
    11a8:	19 c7 ba    	tblrdh.b  [w9], w14
    11aa:	19 05 ba    	tblrdl.w  [w9], w10
    11ac:	0e 04 e0    	cp0.b     w14
    11ae:	03 00 3a    	bra       NZ, 0x11b6 <L12>
    11b0:	0a 00 e0    	cp0.w     w10
    11b2:	db ff 3a    	bra       NZ, 0x116a <L11>
    11b4:	00 00 06    	return    

000011b6 <L12>:
    11b6:	fe 07 b2    	and.w     #0x7f, w14
    11b8:	ae 02 88    	mov.w     w14, 0x54
    11ba:	8a 04 78    	mov.w     w10, w9
    11bc:	f5 ff 37    	bra       0x11a8 <L41>

000011be <L13>:
    11be:	0c d0 a3    	btst.c    w12, #0xd
    11c0:	e2 0f 4d    	addc.w    w10, #0x2, [w15]
    11c2:	1c 00 39    	bra       NC, 0x11fc <L23>
    11c4:	89 02 78    	mov.w     w9, w5
    11c6:	35 4d ba    	tblrdl.b  [w5++], [w10]
    11c8:	0a 05 e8    	inc.w     w10, w10
    11ca:	02 00 39    	bra       NC, 0x11d0 <L32>
    11cc:	34 20 ec    	inc.w     0x34
    11ce:	0a f0 a0    	bset.w    w10, #0xf

000011d0 <L32>:
    11d0:	8b 05 e9    	dec.w     w11, w11
    11d2:	0f 00 32    	bra       Z, 0x11f2 <L42>
    11d4:	25 4d ba    	tblrdl.b  [w5--], [w10]
    11d6:	0a 05 e8    	inc.w     w10, w10
    11d8:	02 00 39    	bra       NC, 0x11de <L33>
    11da:	34 20 ec    	inc.w     0x34
    11dc:	0a f0 a0    	bset.w    w10, #0xf

000011de <L33>:
    11de:	8b 05 e9    	dec.w     w11, w11
    11e0:	08 00 32    	bra       Z, 0x11f2 <L42>
    11e2:	0c 00 e0    	cp0.w     w12
    11e4:	06 00 32    	bra       Z, 0x11f2 <L42>
    11e6:	15 cd ba    	tblrdh.b  [w5], [w10]
    11e8:	0a 05 e8    	inc.w     w10, w10
    11ea:	02 00 39    	bra       NC, 0x11f0 <L34>
    11ec:	34 20 ec    	inc.w     0x34
    11ee:	0a f0 a0    	bset.w    w10, #0xf

000011f0 <L34>:
    11f0:	8b 05 e9    	dec.w     w11, w11

000011f2 <L42>:
    11f2:	89 84 e8    	inc2.w    w9, w9
    11f4:	54 a0 b4    	addc.w    0x54
    11f6:	0b 00 e0    	cp0.w     w11
    11f8:	e2 ff 3a    	bra       NZ, 0x11be <L13> <__memcpyd3extended>
    11fa:	00 00 06    	return    

000011fc <L23>:
    11fc:	99 02 ba    	tblrdl.w  [w9], w5
    11fe:	05 5d 78    	mov.b     w5, [w10++]
    1200:	8b 05 e9    	dec.w     w11, w11
    1202:	f7 ff 32    	bra       Z, 0x11f2 <L42>
    1204:	c8 2a de    	lsr.w     w5, #0x8, w5
    1206:	05 5d 78    	mov.b     w5, [w10++]
    1208:	8b 05 e9    	dec.w     w11, w11
    120a:	f3 ff 32    	bra       Z, 0x11f2 <L42>
    120c:	0c 00 e0    	cp0.w     w12
    120e:	f1 ff 32    	bra       Z, 0x11f2 <L42>
    1210:	19 dd ba    	tblrdh.b  [w9], [w10++]
    1212:	ee ff 37    	bra       0x11f0 <L34>

00001214 <.handle>:
    1214:	aa 1c 04    	goto      0x1caa <_vendor_requests>
    1216:	00 00 00 
    1218:	ca 12 04    	goto      0x12ca <_usb_set_address_callback>
    121a:	00 00 00 
    121c:	0c 1b 04    	goto      0x1b0c <_usb_send_data_packet>
    121e:	00 00 00 

00001220 <__crt_start_mode>:
    1220:	00 00 05    	retlw.w   #0x0, w0
Disassembly of section .application_ivt:

00001000 <__DEFAULT_VECTOR-0x10c>:
    1000:	10 11 04    	goto      0x1110 <__reset>
    1002:	00 00 00 
    1004:	94 1f 04    	goto      0x1f94 <__DefaultInterrupt>
    1006:	00 00 00 
    1008:	94 1f 04    	goto      0x1f94 <__DefaultInterrupt>
    100a:	00 00 00 
    100c:	94 1f 04    	goto      0x1f94 <__DefaultInterrupt>
    100e:	00 00 00 
    1010:	94 1f 04    	goto      0x1f94 <__DefaultInterrupt>
    1012:	00 00 00 
    1014:	94 1f 04    	goto      0x1f94 <__DefaultInterrupt>
    1016:	00 00 00 
    1018:	94 1f 04    	goto      0x1f94 <__DefaultInterrupt>
    101a:	00 00 00 
    101c:	94 1f 04    	goto      0x1f94 <__DefaultInterrupt>
    101e:	00 00 00 
    1020:	94 1f 04    	goto      0x1f94 <__DefaultInterrupt>
    1022:	00 00 00 
    1024:	94 1f 04    	goto      0x1f94 <__DefaultInterrupt>
    1026:	00 00 00 
    1028:	94 1f 04    	goto      0x1f94 <__DefaultInterrupt>
    102a:	00 00 00 
    102c:	94 1f 04    	goto      0x1f94 <__DefaultInterrupt>
    102e:	00 00 00 
    1030:	94 1f 04    	goto      0x1f94 <__DefaultInterrupt>
    1032:	00 00 00 
    1034:	94 1f 04    	goto      0x1f94 <__DefaultInterrupt>
    1036:	00 00 00 
    1038:	94 1f 04    	goto      0x1f94 <__DefaultInterrupt>
    103a:	00 00 00 
    103c:	94 1f 04    	goto      0x1f94 <__DefaultInterrupt>
    103e:	00 00 00 
    1040:	94 1f 04    	goto      0x1f94 <__DefaultInterrupt>
    1042:	00 00 00 
    1044:	94 1f 04    	goto      0x1f94 <__DefaultInterrupt>
    1046:	00 00 00 
    1048:	94 1f 04    	goto      0x1f94 <__DefaultInterrupt>
    104a:	00 00 00 
    104c:	94 1f 04    	goto      0x1f94 <__DefaultInterrupt>
    104e:	00 00 00 
    1050:	94 1f 04    	goto      0x1f94 <__DefaultInterrupt>
    1052:	00 00 00 
    1054:	94 1f 04    	goto      0x1f94 <__DefaultInterrupt>
    1056:	00 00 00 
    1058:	94 1f 04    	goto      0x1f94 <__DefaultInterrupt>
    105a:	00 00 00 
    105c:	94 1f 04    	goto      0x1f94 <__DefaultInterrupt>
    105e:	00 00 00 
    1060:	94 1f 04    	goto      0x1f94 <__DefaultInterrupt>
    1062:	00 00 00 
    1064:	94 1f 04    	goto      0x1f94 <__DefaultInterrupt>
    1066:	00 00 00 
    1068:	94 1f 04    	goto      0x1f94 <__DefaultInterrupt>
    106a:	00 00 00 
    106c:	94 1f 04    	goto      0x1f94 <__DefaultInterrupt>
    106e:	00 00 00 
    1070:	94 1f 04    	goto      0x1f94 <__DefaultInterrupt>
    1072:	00 00 00 
    1074:	94 1f 04    	goto      0x1f94 <__DefaultInterrupt>
    1076:	00 00 00 
    1078:	94 1f 04    	goto      0x1f94 <__DefaultInterrupt>
    107a:	00 00 00 
    107c:	94 1f 04    	goto      0x1f94 <__DefaultInterrupt>
    107e:	00 00 00 
    1080:	94 1f 04    	goto      0x1f94 <__DefaultInterrupt>
    1082:	00 00 00 
    1084:	94 1f 04    	goto      0x1f94 <__DefaultInterrupt>
    1086:	00 00 00 
    1088:	94 1f 04    	goto      0x1f94 <__DefaultInterrupt>
    108a:	00 00 00 
    108c:	94 1f 04    	goto      0x1f94 <__DefaultInterrupt>
    108e:	00 00 00 
    1090:	94 1f 04    	goto      0x1f94 <__DefaultInterrupt>
    1092:	00 00 00 
    1094:	94 1f 04    	goto      0x1f94 <__DefaultInterrupt>
    1096:	00 00 00 
    1098:	94 1f 04    	goto      0x1f94 <__DefaultInterrupt>
    109a:	00 00 00 
    109c:	94 1f 04    	goto      0x1f94 <__DefaultInterrupt>
    109e:	00 00 00 
    10a0:	94 1f 04    	goto      0x1f94 <__DefaultInterrupt>
    10a2:	00 00 00 
    10a4:	94 1f 04    	goto      0x1f94 <__DefaultInterrupt>
    10a6:	00 00 00 
    10a8:	94 1f 04    	goto      0x1f94 <__DefaultInterrupt>
    10aa:	00 00 00 
    10ac:	94 1f 04    	goto      0x1f94 <__DefaultInterrupt>
    10ae:	00 00 00 
    10b0:	94 1f 04    	goto      0x1f94 <__DefaultInterrupt>
    10b2:	00 00 00 
    10b4:	94 1f 04    	goto      0x1f94 <__DefaultInterrupt>
    10b6:	00 00 00 
    10b8:	94 1f 04    	goto      0x1f94 <__DefaultInterrupt>
    10ba:	00 00 00 
    10bc:	94 1f 04    	goto      0x1f94 <__DefaultInterrupt>
    10be:	00 00 00 
    10c0:	94 1f 04    	goto      0x1f94 <__DefaultInterrupt>
    10c2:	00 00 00 
    10c4:	94 1f 04    	goto      0x1f94 <__DefaultInterrupt>
    10c6:	00 00 00 
    10c8:	94 1f 04    	goto      0x1f94 <__DefaultInterrupt>
    10ca:	00 00 00 
    10cc:	94 1f 04    	goto      0x1f94 <__DefaultInterrupt>
    10ce:	00 00 00 
    10d0:	94 1f 04    	goto      0x1f94 <__DefaultInterrupt>
    10d2:	00 00 00 
    10d4:	94 1f 04    	goto      0x1f94 <__DefaultInterrupt>
    10d6:	00 00 00 
    10d8:	94 1f 04    	goto      0x1f94 <__DefaultInterrupt>
    10da:	00 00 00 
    10dc:	94 1f 04    	goto      0x1f94 <__DefaultInterrupt>
    10de:	00 00 00 
    10e0:	94 1f 04    	goto      0x1f94 <__DefaultInterrupt>
    10e2:	00 00 00 
    10e4:	94 1f 04    	goto      0x1f94 <__DefaultInterrupt>
    10e6:	00 00 00 
    10e8:	94 1f 04    	goto      0x1f94 <__DefaultInterrupt>
    10ea:	00 00 00 
    10ec:	54 1f 04    	goto      0x1f54 <__USB1Interrupt>
    10ee:	00 00 00 
    10f0:	94 1f 04    	goto      0x1f94 <__DefaultInterrupt>
    10f2:	00 00 00 
    10f4:	94 1f 04    	goto      0x1f94 <__DefaultInterrupt>
    10f6:	00 00 00 
    10f8:	94 1f 04    	goto      0x1f94 <__DefaultInterrupt>
    10fa:	00 00 00 
    10fc:	94 1f 04    	goto      0x1f94 <__DefaultInterrupt>
    10fe:	00 00 00 
    1100:	94 1f 04    	goto      0x1f94 <__DefaultInterrupt>
    1102:	00 00 00 
    1104:	94 1f 04    	goto      0x1f94 <__DefaultInterrupt>
    1106:	00 00 00 
    1108:	94 1f 04    	goto      0x1f94 <__DefaultInterrupt>
    110a:	00 00 00 

0000110c <__DEFAULT_VECTOR>:
    110c:	94 1f 04    	goto      0x1f94 <__DefaultInterrupt>
    110e:	00 00 00 
Disassembly of section .ivt:

00000004 <.ivt>:
   4:	04 10 00    	nop       
   6:	08 10 00    	nop       
   8:	0c 10 00    	nop       
   a:	10 10 00    	nop       
   c:	14 10 00    	nop       
   e:	0c 11 00    	nop       
  10:	0c 11 00    	nop       
  12:	0c 11 00    	nop       
  14:	18 10 00    	nop       
  16:	1c 10 00    	nop       
  18:	20 10 00    	nop       
  1a:	24 10 00    	nop       
  1c:	0c 11 00    	nop       
  1e:	28 10 00    	nop       
  20:	2c 10 00    	nop       
  22:	30 10 00    	nop       
  24:	34 10 00    	nop       
  26:	38 10 00    	nop       
  28:	3c 10 00    	nop       
  2a:	40 10 00    	nop       
  2c:	44 10 00    	nop       
  2e:	48 10 00    	nop       
  30:	0c 11 00    	nop       
  32:	0c 11 00    	nop       
  34:	4c 10 00    	nop       
  36:	50 10 00    	nop       
  38:	54 10 00    	nop       
  3a:	58 10 00    	nop       
  3c:	5c 10 00    	nop       
  3e:	0c 11 00    	nop       
  40:	60 10 00    	nop       
  42:	64 10 00    	nop       
  44:	0c 11 00    	nop       
  46:	68 10 00    	nop       
  48:	6c 10 00    	nop       
  4a:	70 10 00    	nop       
  4c:	74 10 00    	nop       
  4e:	78 10 00    	nop       
  50:	7c 10 00    	nop       
  52:	80 10 00    	nop       
  54:	84 10 00    	nop       
  56:	88 10 00    	nop       
  58:	0c 11 00    	nop       
  5a:	0c 11 00    	nop       
  5c:	0c 11 00    	nop       
  5e:	8c 10 00    	nop       
  60:	90 10 00    	nop       
  62:	94 10 00    	nop       
  64:	98 10 00    	nop       
  66:	9c 10 00    	nop       
  68:	a0 10 00    	nop       
  6a:	a4 10 00    	nop       
  6c:	a8 10 00    	nop       
  6e:	ac 10 00    	nop       
  70:	0c 11 00    	nop       
  72:	0c 11 00    	nop       
  74:	0c 11 00    	nop       
  76:	b0 10 00    	nop       
  78:	b4 10 00    	nop       
  7a:	0c 11 00    	nop       
  7c:	0c 11 00    	nop       
  7e:	b8 10 00    	nop       
  80:	bc 10 00    	nop       
  82:	0c 11 00    	nop       
  84:	0c 11 00    	nop       
  86:	0c 11 00    	nop       
  88:	0c 11 00    	nop       
  8a:	0c 11 00    	nop       
  8c:	0c 11 00    	nop       
  8e:	0c 11 00    	nop       
  90:	c0 10 00    	nop       
  92:	0c 11 00    	nop       
  94:	0c 11 00    	nop       
  96:	c4 10 00    	nop       
  98:	c8 10 00    	nop       
  9a:	cc 10 00    	nop       
  9c:	0c 11 00    	nop       
  9e:	0c 11 00    	nop       
  a0:	0c 11 00    	nop       
  a2:	0c 11 00    	nop       
  a4:	d0 10 00    	nop       
  a6:	0c 11 00    	nop       
  a8:	0c 11 00    	nop       
  aa:	0c 11 00    	nop       
  ac:	0c 11 00    	nop       
  ae:	d4 10 00    	nop       
  b0:	0c 11 00    	nop       
  b2:	0c 11 00    	nop       
  b4:	0c 11 00    	nop       
  b6:	d8 10 00    	nop       
  b8:	dc 10 00    	nop       
  ba:	e0 10 00    	nop       
  bc:	e4 10 00    	nop       
  be:	e8 10 00    	nop       
  c0:	ec 10 00    	nop       
  c2:	f0 10 00    	nop       
  c4:	f4 10 00    	nop       
  c6:	f8 10 00    	nop       
  c8:	fc 10 00    	nop       
  ca:	00 11 00    	nop       
  cc:	04 11 00    	nop       
  ce:	08 11 00    	nop       
  d0:	0c 11 00    	nop       
  d2:	0c 11 00    	nop       
  d4:	0c 11 00    	nop       
  d6:	0c 11 00    	nop       
  d8:	0c 11 00    	nop       
  da:	0c 11 00    	nop       
  dc:	0c 11 00    	nop       
  de:	0c 11 00    	nop       
  e0:	0c 11 00    	nop       
  e2:	0c 11 00    	nop       
  e4:	0c 11 00    	nop       
  e6:	0c 11 00    	nop       
  e8:	0c 11 00    	nop       
  ea:	0c 11 00    	nop       
  ec:	0c 11 00    	nop       
  ee:	0c 11 00    	nop       
  f0:	0c 11 00    	nop       
  f2:	0c 11 00    	nop       
  f4:	0c 11 00    	nop       
  f6:	0c 11 00    	nop       
  f8:	0c 11 00    	nop       
  fa:	0c 11 00    	nop       
  fc:	0c 11 00    	nop       
  fe:	0c 11 00    	nop       
Disassembly of section .const:

00009222 <_Device>:
    9222:	12 01       	.word 0x112
    9224:	00 02       	.word 0x200
    9226:	00 00       	.word 0
    9228:	00 40       	.word 0x4000
    922a:	66 66       	.word 0x6666
    922c:	03 00       	.word 0x3
    922e:	00 00       	.word 0
    9230:	01 02       	.word 0x201
    9232:	00 01       	.word 0x100

00009234 <_Configuration1>:
    9234:	09 02       	.word 0x209
    9236:	12 00       	.word 0x12
    9238:	01 01       	.word 0x101
    923a:	00 a0       	.word 0xa000
    923c:	32 09       	.word 0x932
    923e:	04 00       	.word 0x4
    9240:	00 00       	.word 0
    9242:	ff 00       	.word 0xff
    9244:	ff 00       	.word 0xff

00009246 <_Configurations>:
    9246:	34 92       	.word 0x9234

00009248 <_String0>:
    9248:	04 03       	.word 0x304
    924a:	09 04       	.word 0x409

0000924c <_String1>:
    924c:	1a 03       	.word 0x31a
    924e:	4f 00       	.word 0x4f
    9250:	6c 00       	.word 0x6c
    9252:	69 00       	.word 0x69
    9254:	6e 00       	.word 0x6e
    9256:	20 00       	.word 0x20
    9258:	43 00       	.word 0x43
    925a:	6f 00       	.word 0x6f
    925c:	6c 00       	.word 0x6c
    925e:	6c 00       	.word 0x6c
    9260:	65 00       	.word 0x65
    9262:	67 00       	.word 0x67
    9264:	65 00       	.word 0x65

00009266 <_String2>:
    9266:	20 03       	.word 0x320
    9268:	50 00       	.word 0x50
    926a:	49 00       	.word 0x49
    926c:	43 00       	.word 0x43
    926e:	32 00       	.word 0x32
    9270:	34 00       	.word 0x34
    9272:	46 00       	.word 0x46
    9274:	4a 00       	.word 0x4a
    9276:	31 00       	.word 0x31
    9278:	32 00       	.word 0x32
    927a:	38 00       	.word 0x38
    927c:	47 00       	.word 0x47
    927e:	42 00       	.word 0x42
    9280:	32 00       	.word 0x32
    9282:	30 00       	.word 0x30
    9284:	36 00       	.word 0x36

00009286 <_Strings>:
    9286:	48 92       	.word 0x9248
    9288:	4c 92       	.word 0x924c
    928a:	66 92       	.word 0x9266
Disassembly of section .text:

0000128c <_usb_disable_endpoints>:
    usb_service();
}
#endif

void usb_disable_endpoints(uint8_t starting_ep) {
    128c:	06 00 fa    	lnk       #0x6
    128e:	40 47 98    	mov.b     w0, [w14+4]
    uint16_t *U1EP;
    uint8_t ep;

    U1EP = (uint16_t *)&U1EP0;
    1290:	a0 4a 20    	mov.w     #0x4aa, w0
    1292:	10 07 98    	mov.w     w0, [w14+2]
    for (ep = starting_ep; ep < 16; ep++) {
    1294:	ce 40 90    	mov.b     [w14+4], w1
    1296:	01 4f 78    	mov.b     w1, [w14]
    1298:	13 00 37    	bra       0x12c0 <.L3>

0000129a <.L4>:
        U1EP[ep] = ENDPT_DISABLED;
    129a:	1e 80 fb    	ze        [w14], w0
    129c:	00 00 40    	add.w     w0, w0, w0
    129e:	9e 00 90    	mov.w     [w14+2], w1
    12a0:	00 80 40    	add.w     w1, w0, w0
    12a2:	80 00 eb    	clr.w     w1
    12a4:	01 08 78    	mov.w     w1, [w0]
        USB_in_callbacks[ep] = (USB_CALLBACK_T)NULL;
    12a6:	1e 80 fb    	ze        [w14], w0
    12a8:	80 00 40    	add.w     w0, w0, w1
    12aa:	80 8a 20    	mov.w     #0x8a8, w0
    12ac:	00 80 40    	add.w     w1, w0, w0
    12ae:	80 00 eb    	clr.w     w1
    12b0:	01 08 78    	mov.w     w1, [w0]
        USB_out_callbacks[ep] = (USB_CALLBACK_T)NULL;
    12b2:	1e 80 fb    	ze        [w14], w0
    12b4:	80 00 40    	add.w     w0, w0, w1
    12b6:	80 8c 20    	mov.w     #0x8c8, w0
    12b8:	00 80 40    	add.w     w1, w0, w0
    12ba:	80 00 eb    	clr.w     w1
    12bc:	01 08 78    	mov.w     w1, [w0]
    12be:	1e 4f e8    	inc.b     [w14], [w14]

000012c0 <.L3>:
    12c0:	1e 40 78    	mov.b     [w14], w0
    12c2:	ef 4f 50    	sub.b     w0, #0xf, [w15]
    12c4:	ea ff 36    	bra       LEU, 0x129a <.L4>
    }
}
    12c6:	00 80 fa    	ulnk      
    12c8:	00 00 06    	return    

000012ca <_usb_set_address_callback>:

void usb_set_address_callback(void) {
    12ca:	00 00 fa    	lnk       #0x0
    switch (U1ADDR = USB_request.setup.wValue.b[0]) {
    12cc:	c0 89 20    	mov.w     #0x89c, w0
    12ce:	10 40 78    	mov.b     [w0], w0
    12d0:	00 80 fb    	ze        w0, w0
    12d2:	b0 24 88    	mov.w     w0, 0x496
    12d4:	b0 24 80    	mov.w     0x496, w0
    12d6:	00 00 e0    	cp0.w     w0
    12d8:	03 00 3a    	bra       NZ, 0x12e0 <.L9>
        case 0:
            USB_USWSTAT = DEFAULT_STATE;
    12da:	10 c0 b3    	mov.b     #0x1, w0
    12dc:	10 e8 b7    	mov.b     WREG, 0x810
            break;
    12de:	02 00 37    	bra       0x12e4 <.L8>

000012e0 <.L9>:
        default:
            USB_USWSTAT = ADDRESS_STATE;
    12e0:	20 c0 b3    	mov.b     #0x2, w0
    12e2:	10 e8 b7    	mov.b     WREG, 0x810

000012e4 <.L8>:
    }
    USB_in_callbacks[0] = (USB_CALLBACK_T)NULL;
    12e4:	00 00 eb    	clr.w     w0
    12e6:	40 45 88    	mov.w     w0, 0x8a8
}
    12e8:	00 80 fa    	ulnk      
    12ea:	00 00 06    	return    

000012ec <_init_usb>:

void init_usb(void) {
    12ec:	00 00 fa    	lnk       #0x0
    IEC5bits.USB1IE = 0;                    // disable USB interrupt
    12ee:	9e c0 a9    	bclr.b    0x9e, #0x6

    U1CONbits.PPBRST = 1;
    12f0:	94 24 a8    	bset.b    0x494, #0x1
    U1ADDR = 0;
    12f2:	96 24 ef    	clr.w     0x496
    U1EIR = 0xFF;
    12f4:	f0 0f 20    	mov.w     #0xff, w0
    12f6:	70 24 88    	mov.w     w0, 0x48e
    U1CONbits.PPBRST = 0;
    12f8:	94 24 a9    	bclr.b    0x494, #0x1
    usb_disable_endpoints(0);               // disable all endpoints
    12fa:	00 40 eb    	clr.b     w0
    12fc:	c7 ff 07    	rcall     0x128c <_usb_disable_endpoints> <.L0> <.LFB1> <.Ltext0>
    U1EP0 = ENDPT_CONTROL;
    12fe:	d0 00 20    	mov.w     #0xd, w0
    1300:	50 25 88    	mov.w     w0, 0x4aa
    BD[EP0OUT].bytecount = MAX_PACKET_SIZE;
    1302:	00 a0 20    	mov.w     #0xa00, w0
    1304:	01 c4 b3    	mov.b     #0x40, w1
    1306:	01 48 78    	mov.b     w1, [w0]
    BD[EP0OUT].address = EP0_OUT_buffer;    // EP0 OUT gets a buffer
    1308:	a0 81 20    	mov.w     #0x81a, w0
    130a:	10 50 88    	mov.w     w0, 0xa02
    BD[EP0OUT].status = UOWN | DTSEN;       // set UOWN bit (USB can write)
    130c:	10 a0 20    	mov.w     #0xa01, w0
    130e:	81 c8 b3    	mov.b     #0x88, w1
    1310:	01 48 78    	mov.b     w1, [w0]
    BD[EP0IN].address = EP0_IN_buffer;      // EP0 IN gets a buffer
    1312:	a0 85 20    	mov.w     #0x85a, w0
    1314:	30 50 88    	mov.w     w0, 0xa06
    BD[EP0IN].status = DTSEN;               // clear UOWN bit (MCU can write)
    1316:	50 a0 20    	mov.w     #0xa05, w0
    1318:	81 c0 b3    	mov.b     #0x8, w1
    131a:	01 48 78    	mov.b     w1, [w0]
    U1CNFG1 = 0;
    131c:	a6 24 ef    	clr.w     0x4a6
    U1CNFG2 = 0;
    131e:	a8 24 ef    	clr.w     0x4a8
    U1BDTP1 = (uint16_t)BD >> 8;
    1320:	00 a0 20    	mov.w     #0xa00, w0
    1322:	48 00 de    	lsr.w     w0, #0x8, w0
    1324:	c0 24 88    	mov.w     w0, 0x498
    U1OTGCONbits.OTGEN = 1;
    1326:	86 44 a8    	bset.b    0x486, #0x2
    U1OTGCONbits.DPPULUP = 1;
    1328:	86 e4 a8    	bset.b    0x486, #0x7
    U1PWRCbits.USBPWR = 1;
    132a:	88 04 a8    	bset.b    0x488, #0x0
    U1CONbits.PKTDIS = 0;
    132c:	94 a4 a9    	bclr.b    0x494, #0x5
    USB_curr_config = 0;
    132e:	0d 68 ef    	clr.b     0x80d
    USB_USWSTAT = POWERED_STATE;
    1330:	10 68 ef    	clr.b     0x810
    USB_device_status = 1;
    1332:	10 c0 b3    	mov.b     #0x1, w0
    1334:	0e e8 b7    	mov.b     WREG, 0x80e
    USB_request.setup.bmRequestType = NO_REQUEST;
    1336:	a0 89 20    	mov.w     #0x89a, w0
    1338:	80 c0 eb    	setm.b    w1
    133a:	01 48 78    	mov.b     w1, [w0]
    USB_request.setup.bRequest = NO_REQUEST;
    133c:	b0 89 20    	mov.w     #0x89b, w0
    133e:	80 c0 eb    	setm.b    w1
    1340:	01 48 78    	mov.b     w1, [w0]
    USB_request.bytes_left.w = 0;
    1342:	00 00 eb    	clr.w     w0
    1344:	20 45 88    	mov.w     w0, 0x8a4
    USB_request.done_callback = (USB_CALLBACK_T)NULL;
    1346:	00 00 eb    	clr.w     w0
    1348:	30 45 88    	mov.w     w0, 0x8a6
    while (U1CONbits.SE0) {}
    134a:	00 00 00    	nop       

0000134c <.L11>:
    134c:	a1 24 80    	mov.w     0x494, w1
    134e:	00 04 20    	mov.w     #0x40, w0
    1350:	00 80 60    	and.w     w1, w0, w0
    1352:	00 00 e0    	cp0.w     w0
    1354:	fb ff 3a    	bra       NZ, 0x134c <.L11>

#ifdef USB_INTERRUPT
    U1IE = 0xFF;
    1356:	f0 0f 20    	mov.w     #0xff, w0
    1358:	60 24 88    	mov.w     w0, 0x48c
    U1EIE = 0xFF;
    135a:	f0 0f 20    	mov.w     #0xff, w0
    135c:	80 24 88    	mov.w     w0, 0x490
    IFS5bits.USB1IF = 0;
    135e:	8e c0 a9    	bclr.b    0x8e, #0x6
    IEC5bits.USB1IE = 1;
    1360:	9e c0 a8    	bset.b    0x9e, #0x6
#endif
}
    1362:	00 80 fa    	ulnk      
    1364:	00 00 06    	return    

00001366 <_usb_service>:

void usb_service(void) {
    1366:	04 00 fa    	lnk       #0x4
    BUFDESC *buf_desc_ptr;
    uint8_t ep;

    if (U1IRbits.UERRIF) {
    1368:	50 24 80    	mov.w     0x48a, w0
    136a:	62 00 60    	and.w     w0, #0x2, w0
    136c:	00 00 e0    	cp0.w     w0
    136e:	05 00 32    	bra       Z, 0x137a <.L13>
        U1EIR = 0xFF;                       // clear all flags in U1EIR to clear U1EIR
    1370:	f0 0f 20    	mov.w     #0xff, w0
    1372:	70 24 88    	mov.w     w0, 0x48e
        U1IR = U1IR_UERRIF;                 // clear UERRIF
    1374:	20 00 20    	mov.w     #0x2, w0
    1376:	50 24 88    	mov.w     w0, 0x48a
    1378:	ba 00 37    	bra       0x14ee <.L14>

0000137a <.L13>:
    } else if (U1IRbits.SOFIF) {
    137a:	50 24 80    	mov.w     0x48a, w0
    137c:	64 00 60    	and.w     w0, #0x4, w0
    137e:	00 00 e0    	cp0.w     w0
    1380:	03 00 32    	bra       Z, 0x1388 <.L15>
        U1IR = U1IR_SOFIF;                  // clear SOFIF
    1382:	40 00 20    	mov.w     #0x4, w0
    1384:	50 24 88    	mov.w     w0, 0x48a
    1386:	b3 00 37    	bra       0x14ee <.L14>

00001388 <.L15>:
    } else if (U1IRbits.IDLEIF) {
    1388:	50 24 80    	mov.w     0x48a, w0
    138a:	70 00 60    	and.w     w0, #0x10, w0
    138c:	00 00 e0    	cp0.w     w0
    138e:	03 00 32    	bra       Z, 0x1396 <.L16>
        U1IR = U1IR_IDLEIF;                 // clear IDLEIF
    1390:	00 01 20    	mov.w     #0x10, w0
    1392:	50 24 88    	mov.w     w0, 0x48a
    1394:	ac 00 37    	bra       0x14ee <.L14>

00001396 <.L16>:
//      U1PWRCbits.USUSPND = 1;             // put USB module in suspend mode
    } else if (U1IRbits.RESUMEIF) {
    1396:	51 24 80    	mov.w     0x48a, w1
    1398:	00 02 20    	mov.w     #0x20, w0
    139a:	00 80 60    	and.w     w1, w0, w0
    139c:	00 00 e0    	cp0.w     w0
    139e:	03 00 32    	bra       Z, 0x13a6 <.L17>
        U1IR = U1IR_RESUMEIF;               // clear RESUMEIF
    13a0:	00 02 20    	mov.w     #0x20, w0
    13a2:	50 24 88    	mov.w     w0, 0x48a
    13a4:	a4 00 37    	bra       0x14ee <.L14>

000013a6 <.L17>:
//      U1PWRCbits.USUSPND = 0;             // resume USB module operation
    } else if (U1IRbits.STALLIF) {
    13a6:	51 24 80    	mov.w     0x48a, w1
    13a8:	00 08 20    	mov.w     #0x80, w0
    13aa:	00 80 60    	and.w     w1, w0, w0
    13ac:	00 00 e0    	cp0.w     w0
    13ae:	03 00 32    	bra       Z, 0x13b6 <.L18>
        U1IR = U1IR_STALLIF;                // clear STALLIF
    13b0:	00 08 20    	mov.w     #0x80, w0
    13b2:	50 24 88    	mov.w     w0, 0x48a
    13b4:	9c 00 37    	bra       0x14ee <.L14>

000013b6 <.L18>:
    } else if (U1IRbits.URSTIF) {
    13b6:	50 24 80    	mov.w     0x48a, w0
    13b8:	61 00 60    	and.w     w0, #0x1, w0
    13ba:	00 00 e0    	cp0.w     w0
    13bc:	27 00 32    	bra       Z, 0x140c <.L19>
        USB_curr_config = 0;
    13be:	0d 68 ef    	clr.b     0x80d
        while (U1IRbits.TRNIF) {
    13c0:	08 00 37    	bra       0x13d2 <.L20>

000013c2 <.L21>:
            U1IR = U1IR_TRNIF;              // clear TRNIF to advance the U1STAT FIFO
    13c2:	80 00 20    	mov.w     #0x8, w0
    13c4:	50 24 88    	mov.w     w0, 0x48a
	...

000013d2 <.L20>:
    13d2:	50 24 80    	mov.w     0x48a, w0
    13d4:	68 00 60    	and.w     w0, #0x8, w0
    13d6:	00 00 e0    	cp0.w     w0
    13d8:	f4 ff 3a    	bra       NZ, 0x13c2 <.L21>
            __builtin_nop();                // wait for six instruction cycles...
            __builtin_nop();
            __builtin_nop();
            __builtin_nop();
            __builtin_nop();
            __builtin_nop();                // ...to allow a pending TRNIF to appear
        }
        usb_disable_endpoints(0);           // disable all endpoints
    13da:	00 40 eb    	clr.b     w0
    13dc:	57 ff 07    	rcall     0x128c <_usb_disable_endpoints> <.L0> <.LFB1> <.Ltext0>
        BD[EP0OUT].bytecount = MAX_PACKET_SIZE;
    13de:	00 a0 20    	mov.w     #0xa00, w0
    13e0:	01 c4 b3    	mov.b     #0x40, w1
    13e2:	01 48 78    	mov.b     w1, [w0]
        BD[EP0OUT].address = EP0_OUT_buffer;    // EP0 OUT gets a buffer
    13e4:	a0 81 20    	mov.w     #0x81a, w0
    13e6:	10 50 88    	mov.w     w0, 0xa02
        BD[EP0OUT].status = UOWN | DTSEN;   // set UOWN bit (USB can write)
    13e8:	10 a0 20    	mov.w     #0xa01, w0
    13ea:	81 c8 b3    	mov.b     #0x88, w1
    13ec:	01 48 78    	mov.b     w1, [w0]
        BD[EP0IN].address = EP0_IN_buffer;  // EP0 IN gets a buffer
    13ee:	a0 85 20    	mov.w     #0x85a, w0
    13f0:	30 50 88    	mov.w     w0, 0xa06
        BD[EP0IN].status = DTSEN;           // clear UOWN bit (MCU can write)
    13f2:	50 a0 20    	mov.w     #0xa05, w0
    13f4:	81 c0 b3    	mov.b     #0x8, w1
    13f6:	01 48 78    	mov.b     w1, [w0]
        U1ADDR = 0;                         // set USB Address to 0
    13f8:	96 24 ef    	clr.w     0x496
        U1IR = 0xFF;                        // clear all the USB interrupt flags
    13fa:	f0 0f 20    	mov.w     #0xff, w0
    13fc:	50 24 88    	mov.w     w0, 0x48a
        U1EP0 = ENDPT_CONTROL;              // EP0 is a control pipe and requires an ACK
    13fe:	d0 00 20    	mov.w     #0xd, w0
    1400:	50 25 88    	mov.w     w0, 0x4aa
//      U1EIE = 0x00FF;                     // enable all USB error interrupts
        USB_USWSTAT = DEFAULT_STATE;
    1402:	10 c0 b3    	mov.b     #0x1, w0
    1404:	10 e8 b7    	mov.b     WREG, 0x810
        USB_device_status = 1;              // self powered, remote wakeup disabled
    1406:	10 c0 b3    	mov.b     #0x1, w0
    1408:	0e e8 b7    	mov.b     WREG, 0x80e
    140a:	71 00 37    	bra       0x14ee <.L14>

0000140c <.L19>:
    } else if (U1IRbits.TRNIF) {
    140c:	50 24 80    	mov.w     0x48a, w0
    140e:	68 00 60    	and.w     w0, #0x8, w0
    1410:	00 00 e0    	cp0.w     w0
    1412:	6d 00 32    	bra       Z, 0x14ee <.L14>
        buf_desc_ptr = &BD[U1STAT >> 3];    // ENDPT and DIR bits of U1STAT provide the offset into the buffer descriptor table
    1414:	90 24 80    	mov.w     0x492, w0
    1416:	43 00 de    	lsr.w     w0, #0x3, w0
    1418:	c2 00 dd    	sl.w      w0, #0x2, w1
    141a:	00 a0 20    	mov.w     #0xa00, w0
    141c:	00 8f 40    	add.w     w1, w0, [w14]
        USB_buffer_desc.status = buf_desc_ptr->status;
    141e:	1e 00 78    	mov.w     [w14], w0
    1420:	10 40 90    	mov.b     [w0+1], w0
    1422:	01 e8 b7    	mov.b     WREG, 0x801
        USB_buffer_desc.bytecount = buf_desc_ptr->bytecount;
    1424:	1e 00 78    	mov.w     [w14], w0
    1426:	10 40 78    	mov.b     [w0], w0
    1428:	00 e8 b7    	mov.b     WREG, 0x800
        USB_buffer_desc.address = buf_desc_ptr->address;
    142a:	1e 00 78    	mov.w     [w14], w0
    142c:	10 00 90    	mov.w     [w0+2], w0
    142e:	10 40 88    	mov.w     w0, 0x802
        USB_USTAT = U1STAT;                 // save the USB status register
    1430:	90 24 80    	mov.w     0x492, w0
    1432:	00 40 78    	mov.b     w0, w0
    1434:	0f e8 b7    	mov.b     WREG, 0x80f
        U1IR = U1IR_TRNIF;                  // clear TRNIF
    1436:	80 00 20    	mov.w     #0x8, w0
    1438:	50 24 88    	mov.w     w0, 0x48a
        USB_error_flags = 0;                // clear USB error flags
    143a:	0c 68 ef    	clr.b     0x80c
        switch (USB_buffer_desc.status & 0x3C) {    // extract PID bits
    143c:	01 c8 bf    	mov.b     0x801, WREG
    143e:	80 80 fb    	ze        w0, w1
    1440:	c0 03 20    	mov.w     #0x3c, w0
    1442:	00 80 60    	and.w     w1, w0, w0
    1444:	41 02 20    	mov.w     #0x24, w1
    1446:	81 0f 50    	sub.w     w0, w1, [w15]
    1448:	08 00 32    	bra       Z, 0x145a <.L24>
    144a:	41 03 20    	mov.w     #0x34, w1
    144c:	81 0f 50    	sub.w     w0, w1, [w15]
    144e:	03 00 32    	bra       Z, 0x1456 <.L25>
    1450:	e4 0f 50    	sub.w     w0, #0x4, [w15]
    1452:	17 00 32    	bra       Z, 0x1482 <.L23>
    1454:	3d 00 37    	bra       0x14d0 <.L22>

00001456 <.L25>:
            case TOKEN_SETUP:
                usb_process_setup_token();
    1456:	4e 00 07    	rcall     0x14f4 <_usb_process_setup_token> <.LFB5> <.LFE4>
                break;
    1458:	3b 00 37    	bra       0x14d0 <.L22>

0000145a <.L24>:
            case TOKEN_IN:
                ep = (USB_USTAT >> 4) & 0x0F;
    145a:	0f c8 bf    	mov.b     0x80f, WREG
    145c:	00 80 fb    	ze        w0, w0
    145e:	44 00 de    	lsr.w     w0, #0x4, w0
    1460:	20 47 98    	mov.b     w0, [w14+2]
                if (USB_in_callbacks[ep])
    1462:	2e 40 90    	mov.b     [w14+2], w0
    1464:	00 80 fb    	ze        w0, w0
    1466:	80 00 40    	add.w     w0, w0, w1
    1468:	80 8a 20    	mov.w     #0x8a8, w0
    146a:	00 80 40    	add.w     w1, w0, w0
    146c:	10 00 78    	mov.w     [w0], w0
    146e:	00 00 e0    	cp0.w     w0
    1470:	2e 00 32    	bra       Z, 0x14ce <.L28>
                    USB_in_callbacks[ep]();
    1472:	2e 40 90    	mov.b     [w14+2], w0
    1474:	00 80 fb    	ze        w0, w0
    1476:	80 00 40    	add.w     w0, w0, w1
    1478:	80 8a 20    	mov.w     #0x8a8, w0
    147a:	00 80 40    	add.w     w1, w0, w0
    147c:	10 00 78    	mov.w     [w0], w0
    147e:	00 00 01    	call      w0
                break;
    1480:	27 00 37    	bra       0x14d0 <.L22>

00001482 <.L23>:
            case TOKEN_OUT:
                ep = (USB_USTAT >> 4) & 0x0F;
    1482:	0f c8 bf    	mov.b     0x80f, WREG
    1484:	00 80 fb    	ze        w0, w0
    1486:	44 00 de    	lsr.w     w0, #0x4, w0
    1488:	20 47 98    	mov.b     w0, [w14+2]
                if (USB_out_callbacks[ep])
    148a:	2e 40 90    	mov.b     [w14+2], w0
    148c:	00 80 fb    	ze        w0, w0
    148e:	80 00 40    	add.w     w0, w0, w1
    1490:	80 8c 20    	mov.w     #0x8c8, w0
    1492:	00 80 40    	add.w     w1, w0, w0
    1494:	10 00 78    	mov.w     [w0], w0
    1496:	00 00 e0    	cp0.w     w0
    1498:	07 00 32    	bra       Z, 0x14a8 <.L27>
                    USB_out_callbacks[ep]();
    149a:	2e 40 90    	mov.b     [w14+2], w0
    149c:	00 80 fb    	ze        w0, w0
    149e:	80 00 40    	add.w     w0, w0, w1
    14a0:	80 8c 20    	mov.w     #0x8c8, w0
    14a2:	00 80 40    	add.w     w1, w0, w0
    14a4:	10 00 78    	mov.w     [w0], w0
    14a6:	00 00 01    	call      w0

000014a8 <.L27>:
                if ((ep == 0) && (USB_request.bytes_left.w == 0)) {
    14a8:	2e 40 90    	mov.b     [w14+2], w0
    14aa:	00 04 e0    	cp0.b     w0
    14ac:	11 00 3a    	bra       NZ, 0x14d0 <.L22>
    14ae:	20 45 80    	mov.w     0x8a4, w0
    14b0:	00 00 e0    	cp0.w     w0
    14b2:	0e 00 3a    	bra       NZ, 0x14d0 <.L22>
                    BD[EP0OUT].bytecount = MAX_PACKET_SIZE; // reset EP0 OUT buffer
    14b4:	00 a0 20    	mov.w     #0xa00, w0
    14b6:	01 c4 b3    	mov.b     #0x40, w1
    14b8:	01 48 78    	mov.b     w1, [w0]
                    BD[EP0OUT].status = UOWN | DTSEN;
    14ba:	10 a0 20    	mov.w     #0xa01, w0
    14bc:	81 c8 b3    	mov.b     #0x88, w1
    14be:	01 48 78    	mov.b     w1, [w0]
                    BD[EP0IN].bytecount = 0;                // complete status phase of control transfer
    14c0:	40 a0 20    	mov.w     #0xa04, w0
    14c2:	80 40 eb    	clr.b     w1
    14c4:	01 48 78    	mov.b     w1, [w0]
                    BD[EP0IN].status = UOWN | DTS | DTSEN;  // send packet as DATA1, set UOWN bit
    14c6:	50 a0 20    	mov.w     #0xa05, w0
    14c8:	81 cc b3    	mov.b     #0xc8, w1
    14ca:	01 48 78    	mov.b     w1, [w0]
    14cc:	01 00 37    	bra       0x14d0 <.L22>

000014ce <.L28>:
    14ce:	00 00 00    	nop       

000014d0 <.L22>:
                }
        }
        if (USB_error_flags & REQUEST_ERROR) {      // if there was a Request Error...
    14d0:	0c c8 bf    	mov.b     0x80c, WREG
    14d2:	00 80 fb    	ze        w0, w0
    14d4:	61 00 60    	and.w     w0, #0x1, w0
    14d6:	00 40 78    	mov.b     w0, w0
    14d8:	00 04 e0    	cp0.b     w0
    14da:	09 00 32    	bra       Z, 0x14ee <.L14>
            BD[EP0OUT].bytecount = MAX_PACKET_SIZE; // ...get ready to receive the next Setup token...
    14dc:	00 a0 20    	mov.w     #0xa00, w0
    14de:	01 c4 b3    	mov.b     #0x40, w1
    14e0:	01 48 78    	mov.b     w1, [w0]
            BD[EP0IN].status = UOWN | BSTALL;
    14e2:	50 a0 20    	mov.w     #0xa05, w0
    14e4:	41 c8 b3    	mov.b     #0x84, w1
    14e6:	01 48 78    	mov.b     w1, [w0]
            BD[EP0OUT].status = UOWN | BSTALL;      // ...and issue a protocol stall on EP0
    14e8:	10 a0 20    	mov.w     #0xa01, w0
    14ea:	41 c8 b3    	mov.b     #0x84, w1
    14ec:	01 48 78    	mov.b     w1, [w0]

000014ee <.L14>:
        }
    }
    IFS5bits.USB1IF = 0;                    // clear USB Interrupt flag
    14ee:	8e c0 a9    	bclr.b    0x8e, #0x6
}
    14f0:	00 80 fa    	ulnk      
    14f2:	00 00 06    	return    

000014f4 <_usb_process_setup_token>:

void usb_process_setup_token(void) {
    14f4:	02 00 fa    	lnk       #0x2
    uint8_t *buf_ptr;

    buf_ptr = USB_buffer_desc.address;
    14f6:	11 40 80    	mov.w     0x802, w1
    14f8:	01 0f 78    	mov.w     w1, [w14]
    USB_setup.bmRequestType = *buf_ptr++;           // copy the setup packet received from the host
    14fa:	1e 00 78    	mov.w     [w14], w0
    14fc:	90 40 78    	mov.b     [w0], w1
    14fe:	40 80 20    	mov.w     #0x804, w0
    1500:	01 48 78    	mov.b     w1, [w0]
    1502:	1e 0f e8    	inc.w     [w14], [w14]
    USB_setup.bRequest = *buf_ptr++;
    1504:	1e 00 78    	mov.w     [w14], w0
    1506:	90 40 78    	mov.b     [w0], w1
    1508:	40 80 20    	mov.w     #0x804, w0
    150a:	11 40 98    	mov.b     w1, [w0+1]
    150c:	1e 0f e8    	inc.w     [w14], [w14]
    USB_setup.wValue.b[0] = *buf_ptr++;
    150e:	1e 00 78    	mov.w     [w14], w0
    1510:	90 40 78    	mov.b     [w0], w1
    1512:	40 80 20    	mov.w     #0x804, w0
    1514:	21 40 98    	mov.b     w1, [w0+2]
    1516:	1e 0f e8    	inc.w     [w14], [w14]
    USB_setup.wValue.b[1] = *buf_ptr++;
    1518:	1e 00 78    	mov.w     [w14], w0
    151a:	90 40 78    	mov.b     [w0], w1
    151c:	40 80 20    	mov.w     #0x804, w0
    151e:	31 40 98    	mov.b     w1, [w0+3]
    1520:	1e 0f e8    	inc.w     [w14], [w14]
    USB_setup.wIndex.b[0] = *buf_ptr++;
    1522:	1e 00 78    	mov.w     [w14], w0
    1524:	90 40 78    	mov.b     [w0], w1
    1526:	40 80 20    	mov.w     #0x804, w0
    1528:	41 40 98    	mov.b     w1, [w0+4]
    152a:	1e 0f e8    	inc.w     [w14], [w14]
    USB_setup.wIndex.b[1] = *buf_ptr++;
    152c:	1e 00 78    	mov.w     [w14], w0
    152e:	90 40 78    	mov.b     [w0], w1
    1530:	40 80 20    	mov.w     #0x804, w0
    1532:	51 40 98    	mov.b     w1, [w0+5]
    1534:	1e 0f e8    	inc.w     [w14], [w14]
    USB_setup.wLength.b[0] = *buf_ptr++;
    1536:	1e 00 78    	mov.w     [w14], w0
    1538:	90 40 78    	mov.b     [w0], w1
    153a:	40 80 20    	mov.w     #0x804, w0
    153c:	61 40 98    	mov.b     w1, [w0+6]
    153e:	1e 0f e8    	inc.w     [w14], [w14]
    USB_setup.wLength.b[1] = *buf_ptr++;
    1540:	1e 00 78    	mov.w     [w14], w0
    1542:	90 40 78    	mov.b     [w0], w1
    1544:	40 80 20    	mov.w     #0x804, w0
    1546:	71 40 98    	mov.b     w1, [w0+7]
    1548:	1e 0f e8    	inc.w     [w14], [w14]
    BD[EP0OUT].bytecount = MAX_PACKET_SIZE;         // reset the EP0 OUT byte count
    154a:	00 a0 20    	mov.w     #0xa00, w0
    154c:	01 c4 b3    	mov.b     #0x40, w1
    154e:	01 48 78    	mov.b     w1, [w0]
    BD[EP0IN].status = DTSEN;                       // return the EP0 IN buffer to us (dequeue any pending requests)
    1550:	50 a0 20    	mov.w     #0xa05, w0
    1552:	81 c0 b3    	mov.b     #0x8, w1
    1554:	01 48 78    	mov.b     w1, [w0]
    BD[EP0OUT].status = (!(USB_setup.bmRequestType & UOWN) && (USB_setup.wLength.w)) ? UOWN | DTS | DTSEN:0x88;    // set EP0 OUT UOWN back to USB and DATA0/DATA1 packet according to the request type
    1556:	40 80 20    	mov.w     #0x804, w0
    1558:	10 40 78    	mov.b     [w0], w0
    155a:	00 04 e0    	cp0.b     w0
    155c:	06 00 35    	bra       LT, 0x156a <.L30>
    155e:	40 80 20    	mov.w     #0x804, w0
    1560:	30 00 90    	mov.w     [w0+6], w0
    1562:	00 00 e0    	cp0.w     w0
    1564:	02 00 32    	bra       Z, 0x156a <.L30>
    1566:	80 cc b3    	mov.b     #0xc8, w0
    1568:	01 00 37    	bra       0x156c <.L31>

0000156a <.L30>:
    156a:	80 c8 b3    	mov.b     #0x88, w0

0000156c <.L31>:
    156c:	11 a0 20    	mov.w     #0xa01, w1
    156e:	80 48 78    	mov.b     w0, [w1]
    U1CONbits.PKTDIS = 0;                           // assuming there is nothing to dequeue, clear the packet disable bit
    1570:	94 a4 a9    	bclr.b    0x494, #0x5
    USB_request.setup.bmRequestType = NO_REQUEST;   // clear the device request in process
    1572:	a0 89 20    	mov.w     #0x89a, w0
    1574:	80 c0 eb    	setm.b    w1
    1576:	01 48 78    	mov.b     w1, [w0]
    USB_request.setup.bRequest = NO_REQUEST;
    1578:	b0 89 20    	mov.w     #0x89b, w0
    157a:	80 c0 eb    	setm.b    w1
    157c:	01 48 78    	mov.b     w1, [w0]
    USB_request.bytes_left.w = 0;
    157e:	00 00 eb    	clr.w     w0
    1580:	20 45 88    	mov.w     w0, 0x8a4
    USB_request.done_callback = (USB_CALLBACK_T)NULL;
    1582:	00 00 eb    	clr.w     w0
    1584:	30 45 88    	mov.w     w0, 0x8a6
    switch (USB_setup.bmRequestType & 0x60) {       // extract request type bits
    1586:	40 80 20    	mov.w     #0x804, w0
    1588:	10 40 78    	mov.b     [w0], w0
    158a:	80 80 fb    	ze        w0, w1
    158c:	00 06 20    	mov.w     #0x60, w0
    158e:	00 80 60    	and.w     w1, w0, w0
    1590:	01 02 20    	mov.w     #0x20, w1
    1592:	81 0f 50    	sub.w     w0, w1, [w15]
    1594:	11 00 32    	bra       Z, 0x15b8 <.L34>
    1596:	01 04 20    	mov.w     #0x40, w1
    1598:	81 0f 50    	sub.w     w0, w1, [w15]
    159a:	04 00 32    	bra       Z, 0x15a4 <.L35>
    159c:	00 00 e0    	cp0.w     w0
    159e:	16 00 3a    	bra       NZ, 0x15cc <.L41>
        case STANDARD_REQ:
            usb_standard_requests();
    15a0:	1a 00 07    	rcall     0x15d6 <_usb_standard_requests> <.LFB6> <.LFE5>
            break;
    15a2:	17 00 37    	bra       0x15d2 <.L29>

000015a4 <.L35>:
        case VENDOR_REQ:
            if (USB_setup_vendor_callback)
    15a4:	c0 40 80    	mov.w     0x818, w0
    15a6:	00 00 e0    	cp0.w     w0
    15a8:	03 00 32    	bra       Z, 0x15b0 <.L37>
                USB_setup_vendor_callback();
    15aa:	c0 40 80    	mov.w     0x818, w0
    15ac:	00 00 01    	call      w0
            else
                USB_error_flags |= REQUEST_ERROR;
            break;
    15ae:	11 00 37    	bra       0x15d2 <.L29>

000015b0 <.L37>:
    15b0:	0c c8 bf    	mov.b     0x80c, WREG
    15b2:	00 04 a0    	bset.b    w0, #0x0
    15b4:	0c e8 b7    	mov.b     WREG, 0x80c
    15b6:	0d 00 37    	bra       0x15d2 <.L29>

000015b8 <.L34>:
        case CLASS_REQ:
            if (USB_setup_class_callback)
    15b8:	b0 40 80    	mov.w     0x816, w0
    15ba:	00 00 e0    	cp0.w     w0
    15bc:	03 00 32    	bra       Z, 0x15c4 <.L39>
                USB_setup_class_callback();
    15be:	b0 40 80    	mov.w     0x816, w0
    15c0:	00 00 01    	call      w0
            else
                USB_error_flags |= REQUEST_ERROR;
            break;
    15c2:	07 00 37    	bra       0x15d2 <.L29>

000015c4 <.L39>:
    15c4:	0c c8 bf    	mov.b     0x80c, WREG
    15c6:	00 04 a0    	bset.b    w0, #0x0
    15c8:	0c e8 b7    	mov.b     WREG, 0x80c
    15ca:	03 00 37    	bra       0x15d2 <.L29>

000015cc <.L41>:
        default:
            USB_error_flags |= REQUEST_ERROR;
    15cc:	0c c8 bf    	mov.b     0x80c, WREG
    15ce:	00 04 a0    	bset.b    w0, #0x0
    15d0:	0c e8 b7    	mov.b     WREG, 0x80c

000015d2 <.L29>:
    }
}
    15d2:	00 80 fa    	ulnk      
    15d4:	00 00 06    	return    

000015d6 <_usb_standard_requests>:

void usb_standard_requests(void) {
    15d6:	06 00 fa    	lnk       #0x6
    BUFDESC *buf_desc_ptr;
    uint16_t *U1EP;
    uint8_t ep;

    switch (USB_setup.bRequest) {
    15d8:	40 80 20    	mov.w     #0x804, w0
    15da:	10 40 90    	mov.b     [w0+1], w0
    15dc:	00 80 fb    	ze        w0, w0
    15de:	e6 0f 50    	sub.w     w0, #0x6, [w15]
    15e0:	ba 01 32    	bra       Z, 0x1956 <.L47>
    15e2:	e6 0f 50    	sub.w     w0, #0x6, [w15]
    15e4:	0c 00 3c    	bra       GT, 0x15fe <.L52>
    15e6:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    15e8:	c1 00 32    	bra       Z, 0x176c <.L45>
    15ea:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    15ec:	03 00 3c    	bra       GT, 0x15f4 <.L53>
    15ee:	00 00 e0    	cp0.w     w0
    15f0:	12 00 32    	bra       Z, 0x1616 <.L44>
    15f2:	85 02 37    	bra       0x1afe <.L43>

000015f4 <.L53>:
    15f4:	e3 0f 50    	sub.w     w0, #0x3, [w15]
    15f6:	ba 00 32    	bra       Z, 0x176c <.L45>
    15f8:	e5 0f 50    	sub.w     w0, #0x5, [w15]
    15fa:	8b 01 32    	bra       Z, 0x1912 <.L46>
    15fc:	80 02 37    	bra       0x1afe <.L43>

000015fe <.L52>:
    15fe:	e9 0f 50    	sub.w     w0, #0x9, [w15]
    1600:	20 02 32    	bra       Z, 0x1a42 <.L49>
    1602:	e9 0f 50    	sub.w     w0, #0x9, [w15]
    1604:	03 00 3c    	bra       GT, 0x160c <.L54>
    1606:	e8 0f 50    	sub.w     w0, #0x8, [w15]
    1608:	11 02 32    	bra       Z, 0x1a2c <.L48>
    160a:	79 02 37    	bra       0x1afe <.L43>

0000160c <.L54>:
    160c:	ea 0f 50    	sub.w     w0, #0xa, [w15]
    160e:	3b 02 32    	bra       Z, 0x1a86 <.L50>
    1610:	eb 0f 50    	sub.w     w0, #0xb, [w15]
    1612:	54 02 32    	bra       Z, 0x1abc <.L51>
    1614:	74 02 37    	bra       0x1afe <.L43>

00001616 <.L44>:
        case GET_STATUS:
            switch (USB_setup.bmRequestType & 0x1F) {   // extract request recipient bits
    1616:	40 80 20    	mov.w     #0x804, w0
    1618:	10 40 78    	mov.b     [w0], w0
    161a:	00 80 fb    	ze        w0, w0
    161c:	7f 00 60    	and.w     w0, #0x1f, w0
    161e:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    1620:	13 00 32    	bra       Z, 0x1648 <.L57>
    1622:	e2 0f 50    	sub.w     w0, #0x2, [w15]
    1624:	32 00 32    	bra       Z, 0x168a <.L58>
    1626:	00 00 e0    	cp0.w     w0
    1628:	9c 00 3a    	bra       NZ, 0x1762 <.L134>
                case RECIPIENT_DEVICE:
                    BD[EP0IN].address[0] = USB_device_status;
    162a:	30 50 80    	mov.w     0xa06, w0
    162c:	e1 80 20    	mov.w     #0x80e, w1
    162e:	91 40 78    	mov.b     [w1], w1
    1630:	01 48 78    	mov.b     w1, [w0]
                    BD[EP0IN].address[1] = 0;
    1632:	30 50 80    	mov.w     0xa06, w0
    1634:	00 00 e8    	inc.w     w0, w0
    1636:	80 40 eb    	clr.b     w1
    1638:	01 48 78    	mov.b     w1, [w0]
                    BD[EP0IN].bytecount = 2;
    163a:	40 a0 20    	mov.w     #0xa04, w0
    163c:	21 c0 b3    	mov.b     #0x2, w1
    163e:	01 48 78    	mov.b     w1, [w0]
                    BD[EP0IN].status = UOWN | DTS | DTSEN;  // send packet as DATA1, set UOWN bit
    1640:	50 a0 20    	mov.w     #0xa05, w0
    1642:	81 cc b3    	mov.b     #0xc8, w1
    1644:	01 48 78    	mov.b     w1, [w0]
                    break;
    1646:	91 00 37    	bra       0x176a <.L59>

00001648 <.L57>:
                case RECIPIENT_INTERFACE:
                    switch (USB_USWSTAT) {
    1648:	10 c8 bf    	mov.b     0x810, WREG
    164a:	00 80 fb    	ze        w0, w0
    164c:	e2 0f 50    	sub.w     w0, #0x2, [w15]
    164e:	03 00 32    	bra       Z, 0x1656 <.L61>
    1650:	e3 0f 50    	sub.w     w0, #0x3, [w15]
    1652:	05 00 32    	bra       Z, 0x165e <.L62>
    1654:	19 00 37    	bra       0x1688 <.L60>

00001656 <.L61>:
                        case ADDRESS_STATE:
                            USB_error_flags |= REQUEST_ERROR;
    1656:	0c c8 bf    	mov.b     0x80c, WREG
    1658:	00 04 a0    	bset.b    w0, #0x0
    165a:	0c e8 b7    	mov.b     WREG, 0x80c
                            break;
    165c:	15 00 37    	bra       0x1688 <.L60>

0000165e <.L62>:
                        case CONFIG_STATE:
                            if (USB_setup.wIndex.b[0] < NUM_INTERFACES) {
    165e:	40 80 20    	mov.w     #0x804, w0
    1660:	40 40 90    	mov.b     [w0+4], w0
    1662:	00 04 e0    	cp0.b     w0
    1664:	0e 00 3a    	bra       NZ, 0x1682 <.L63>
                                BD[EP0IN].address[0] = 0;
    1666:	30 50 80    	mov.w     0xa06, w0
    1668:	80 40 eb    	clr.b     w1
    166a:	01 48 78    	mov.b     w1, [w0]
                                BD[EP0IN].address[1] = 0;
    166c:	30 50 80    	mov.w     0xa06, w0
    166e:	00 00 e8    	inc.w     w0, w0
    1670:	80 40 eb    	clr.b     w1
    1672:	01 48 78    	mov.b     w1, [w0]
                                BD[EP0IN].bytecount = 2;
    1674:	40 a0 20    	mov.w     #0xa04, w0
    1676:	21 c0 b3    	mov.b     #0x2, w1
    1678:	01 48 78    	mov.b     w1, [w0]
                                BD[EP0IN].status = UOWN | DTS | DTSEN;  // send packet as DATA1, set UOWN bit
    167a:	50 a0 20    	mov.w     #0xa05, w0
    167c:	81 cc b3    	mov.b     #0xc8, w1
    167e:	01 48 78    	mov.b     w1, [w0]
    1680:	03 00 37    	bra       0x1688 <.L60>

00001682 <.L63>:
                            } else {
                                USB_error_flags |= REQUEST_ERROR;
    1682:	0c c8 bf    	mov.b     0x80c, WREG
    1684:	00 04 a0    	bset.b    w0, #0x0
    1686:	0c e8 b7    	mov.b     WREG, 0x80c

00001688 <.L60>:
                            }
                    }
                    break;
    1688:	70 00 37    	bra       0x176a <.L59>

0000168a <.L58>:
                case RECIPIENT_ENDPOINT:
                    switch (USB_USWSTAT) {
    168a:	10 c8 bf    	mov.b     0x810, WREG
    168c:	00 80 fb    	ze        w0, w0
    168e:	e2 0f 50    	sub.w     w0, #0x2, [w15]
    1690:	03 00 32    	bra       Z, 0x1698 <.L65>
    1692:	e3 0f 50    	sub.w     w0, #0x3, [w15]
    1694:	29 00 32    	bra       Z, 0x16e8 <.L66>
    1696:	61 00 37    	bra       0x175a <.L135>

00001698 <.L65>:
                        case ADDRESS_STATE:
                            if (!(USB_setup.wIndex.b[0] & 0x0F)) {  // get EP, strip off direction bit and see if it is EP0
    1698:	40 80 20    	mov.w     #0x804, w0
    169a:	40 40 90    	mov.b     [w0+4], w0
    169c:	00 80 fb    	ze        w0, w0
    169e:	6f 00 60    	and.w     w0, #0xf, w0
    16a0:	00 00 e0    	cp0.w     w0
    16a2:	1e 00 3a    	bra       NZ, 0x16e0 <.L67>
                                BD[EP0IN].address[0] = (((USB_setup.wIndex.b[0] & 0x80) ? BD[EP0IN].status : BD[EP0OUT].status) & 0x04) >> 2;   // return the BSTALL bit of EP0 IN or OUT, whichever was requested
    16a4:	31 50 80    	mov.w     0xa06, w1
    16a6:	40 80 20    	mov.w     #0x804, w0
    16a8:	40 40 90    	mov.b     [w0+4], w0
    16aa:	00 04 e0    	cp0.b     w0
    16ac:	07 00 3d    	bra       GE, 0x16bc <.L68>
    16ae:	50 a0 20    	mov.w     #0xa05, w0
    16b0:	10 40 78    	mov.b     [w0], w0
    16b2:	00 80 fb    	ze        w0, w0
    16b4:	64 00 60    	and.w     w0, #0x4, w0
    16b6:	42 80 de    	asr.w     w0, #0x2, w0
    16b8:	00 40 78    	mov.b     w0, w0
    16ba:	06 00 37    	bra       0x16c8 <.L69>

000016bc <.L68>:
    16bc:	10 a0 20    	mov.w     #0xa01, w0
    16be:	10 40 78    	mov.b     [w0], w0
    16c0:	00 80 fb    	ze        w0, w0
    16c2:	64 00 60    	and.w     w0, #0x4, w0
    16c4:	42 80 de    	asr.w     w0, #0x2, w0
    16c6:	00 40 78    	mov.b     w0, w0

000016c8 <.L69>:
    16c8:	80 48 78    	mov.b     w0, [w1]
                                BD[EP0IN].address[1] = 0;
    16ca:	30 50 80    	mov.w     0xa06, w0
    16cc:	00 00 e8    	inc.w     w0, w0
    16ce:	80 40 eb    	clr.b     w1
    16d0:	01 48 78    	mov.b     w1, [w0]
                                BD[EP0IN].bytecount = 2;
    16d2:	40 a0 20    	mov.w     #0xa04, w0
    16d4:	21 c0 b3    	mov.b     #0x2, w1
    16d6:	01 48 78    	mov.b     w1, [w0]
                                BD[EP0IN].status = UOWN | DTS | DTSEN;  // send packet as DATA1, set UOWN bit
    16d8:	50 a0 20    	mov.w     #0xa05, w0
    16da:	81 cc b3    	mov.b     #0xc8, w1
    16dc:	01 48 78    	mov.b     w1, [w0]
    16de:	03 00 37    	bra       0x16e6 <.L70>

000016e0 <.L67>:
                            } else {
                                USB_error_flags |= REQUEST_ERROR;
    16e0:	0c c8 bf    	mov.b     0x80c, WREG
    16e2:	00 04 a0    	bset.b    w0, #0x0
    16e4:	0c e8 b7    	mov.b     WREG, 0x80c

000016e6 <.L70>:
                            }
                            break;
    16e6:	3c 00 37    	bra       0x1760 <.L71>

000016e8 <.L66>:
                        case CONFIG_STATE:
                            U1EP = (uint16_t *)&U1EP0;
    16e8:	a0 4a 20    	mov.w     #0x4aa, w0
    16ea:	00 0f 78    	mov.w     w0, [w14]
                            ep = USB_setup.wIndex.b[0] & 0x0F;  // get EP and strip off direction bit for offset from U1EP0
    16ec:	40 80 20    	mov.w     #0x804, w0
    16ee:	40 40 90    	mov.b     [w0+4], w0
    16f0:	6f 40 60    	and.b     w0, #0xf, w0
    16f2:	20 47 98    	mov.b     w0, [w14+2]
                            buf_desc_ptr = &BD[EP0OUT] + ((ep << 1) | ((USB_setup.wIndex.b[0] & 0x80) ? 0x01 : 0x00));  // compute pointer to the buffer descriptor for the specified EP
    16f4:	2e 40 90    	mov.b     [w14+2], w0
    16f6:	00 80 fb    	ze        w0, w0
    16f8:	00 00 40    	add.w     w0, w0, w0
    16fa:	80 00 78    	mov.w     w0, w1
    16fc:	40 80 20    	mov.w     #0x804, w0
    16fe:	40 40 90    	mov.b     [w0+4], w0
    1700:	00 00 fb    	se        w0, w0
    1702:	4f 00 de    	lsr.w     w0, #0xf, w0
    1704:	01 00 70    	ior.w     w0, w1, w0
    1706:	c2 00 dd    	sl.w      w0, #0x2, w1
    1708:	00 a0 20    	mov.w     #0xa00, w0
    170a:	00 80 40    	add.w     w1, w0, w0
    170c:	20 07 98    	mov.w     w0, [w14+4]
                            if (U1EP[ep] & ((USB_setup.wIndex.b[0] & 0x80) ? 0x04 : 0x08)) {    // if the specified EP is enabled for transfers in the specified direction...
    170e:	2e 40 90    	mov.b     [w14+2], w0
    1710:	00 80 fb    	ze        w0, w0
    1712:	00 00 40    	add.w     w0, w0, w0
    1714:	1e 00 40    	add.w     w0, [w14], w0
    1716:	90 00 78    	mov.w     [w0], w1
    1718:	40 80 20    	mov.w     #0x804, w0
    171a:	40 40 90    	mov.b     [w0+4], w0
    171c:	00 04 e0    	cp0.b     w0
    171e:	02 00 3d    	bra       GE, 0x1724 <.L72>
    1720:	40 00 20    	mov.w     #0x4, w0
    1722:	01 00 37    	bra       0x1726 <.L73>

00001724 <.L72>:
    1724:	80 00 20    	mov.w     #0x8, w0

00001726 <.L73>:
    1726:	00 80 60    	and.w     w1, w0, w0
    1728:	00 00 e0    	cp0.w     w0
    172a:	13 00 32    	bra       Z, 0x1752 <.L74>
                                BD[EP0IN].address[0] = ((buf_desc_ptr->status) & 0x04) >> 2;    // ...return the BSTALL bit of the specified EP
    172c:	30 50 80    	mov.w     0xa06, w0
    172e:	ae 00 90    	mov.w     [w14+4], w1
    1730:	91 40 90    	mov.b     [w1+1], w1
    1732:	81 80 fb    	ze        w1, w1
    1734:	e4 80 60    	and.w     w1, #0x4, w1
    1736:	c2 88 de    	asr.w     w1, #0x2, w1
    1738:	81 40 78    	mov.b     w1, w1
    173a:	01 48 78    	mov.b     w1, [w0]
                                BD[EP0IN].address[1] = 0;
    173c:	30 50 80    	mov.w     0xa06, w0
    173e:	00 00 e8    	inc.w     w0, w0
    1740:	80 40 eb    	clr.b     w1
    1742:	01 48 78    	mov.b     w1, [w0]
                                BD[EP0IN].bytecount = 2;
    1744:	40 a0 20    	mov.w     #0xa04, w0
    1746:	21 c0 b3    	mov.b     #0x2, w1
    1748:	01 48 78    	mov.b     w1, [w0]
                                BD[EP0IN].status = UOWN | DTS | DTSEN;  // send packet as DATA1, set UOWN bit
    174a:	50 a0 20    	mov.w     #0xa05, w0
    174c:	81 cc b3    	mov.b     #0xc8, w1
    174e:	01 48 78    	mov.b     w1, [w0]
    1750:	03 00 37    	bra       0x1758 <.L75>

00001752 <.L74>:
                            } else {
                                USB_error_flags |= REQUEST_ERROR;
    1752:	0c c8 bf    	mov.b     0x80c, WREG
    1754:	00 04 a0    	bset.b    w0, #0x0
    1756:	0c e8 b7    	mov.b     WREG, 0x80c

00001758 <.L75>:
                            }
                            break;
    1758:	03 00 37    	bra       0x1760 <.L71>

0000175a <.L135>:
                        default:
                            USB_error_flags |= REQUEST_ERROR;
    175a:	0c c8 bf    	mov.b     0x80c, WREG
    175c:	00 04 a0    	bset.b    w0, #0x0
    175e:	0c e8 b7    	mov.b     WREG, 0x80c

00001760 <.L71>:
                    }
                    break;
    1760:	04 00 37    	bra       0x176a <.L59>

00001762 <.L134>:
                default:
                    USB_error_flags |= REQUEST_ERROR;
    1762:	0c c8 bf    	mov.b     0x80c, WREG
    1764:	00 04 a0    	bset.b    w0, #0x0
    1766:	0c e8 b7    	mov.b     WREG, 0x80c
            }
            break;
    1768:	cf 01 37    	bra       0x1b08 <.L42>

0000176a <.L59>:
    176a:	ce 01 37    	bra       0x1b08 <.L42>

0000176c <.L45>:
        case CLEAR_FEATURE:
        case SET_FEATURE:
            switch (USB_setup.bmRequestType & 0x1F) {       // extract request recipient bits
    176c:	40 80 20    	mov.w     #0x804, w0
    176e:	10 40 78    	mov.b     [w0], w0
    1770:	00 80 fb    	ze        w0, w0
    1772:	7f 00 60    	and.w     w0, #0x1f, w0
    1774:	00 00 e0    	cp0.w     w0
    1776:	03 00 32    	bra       Z, 0x177e <.L78>
    1778:	e2 0f 50    	sub.w     w0, #0x2, [w15]
    177a:	1c 00 32    	bra       Z, 0x17b4 <.L79>
    177c:	c5 00 37    	bra       0x1908 <.L136>

0000177e <.L78>:
                case RECIPIENT_DEVICE:
                    switch (USB_setup.wValue.b[0]) {
    177e:	40 80 20    	mov.w     #0x804, w0
    1780:	20 40 90    	mov.b     [w0+2], w0
    1782:	00 80 fb    	ze        w0, w0
    1784:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    1786:	12 00 3a    	bra       NZ, 0x17ac <.L137>
                        case DEVICE_REMOTE_WAKEUP:
                            if (USB_setup.bRequest == CLEAR_FEATURE)
    1788:	40 80 20    	mov.w     #0x804, w0
    178a:	10 40 90    	mov.b     [w0+1], w0
    178c:	e1 4f 50    	sub.b     w0, #0x1, [w15]
    178e:	04 00 3a    	bra       NZ, 0x1798 <.L82>
                                USB_device_status &= 0xFE;
    1790:	0e c8 bf    	mov.b     0x80e, WREG
    1792:	00 04 a1    	bclr.b    w0, #0x0
    1794:	0e e8 b7    	mov.b     WREG, 0x80e
    1796:	03 00 37    	bra       0x179e <.L83>

00001798 <.L82>:
                            else
                                USB_device_status |= 0x01;
    1798:	0e c8 bf    	mov.b     0x80e, WREG
    179a:	00 04 a0    	bset.b    w0, #0x0
    179c:	0e e8 b7    	mov.b     WREG, 0x80e

0000179e <.L83>:
                            BD[EP0IN].bytecount = 0;
    179e:	40 a0 20    	mov.w     #0xa04, w0
    17a0:	80 40 eb    	clr.b     w1
    17a2:	01 48 78    	mov.b     w1, [w0]
                            BD[EP0IN].status = UOWN | DTS | DTSEN;  // send packet as DATA1, set UOWN bit
    17a4:	50 a0 20    	mov.w     #0xa05, w0
    17a6:	81 cc b3    	mov.b     #0xc8, w1
    17a8:	01 48 78    	mov.b     w1, [w0]
                            break;
    17aa:	03 00 37    	bra       0x17b2 <.L84>

000017ac <.L137>:
                        default:
                            USB_error_flags |= REQUEST_ERROR;
    17ac:	0c c8 bf    	mov.b     0x80c, WREG
    17ae:	00 04 a0    	bset.b    w0, #0x0
    17b0:	0c e8 b7    	mov.b     WREG, 0x80c

000017b2 <.L84>:
                    }
                    break;
    17b2:	ae 00 37    	bra       0x1910 <.L85>

000017b4 <.L79>:
                case RECIPIENT_ENDPOINT:
                    switch (USB_USWSTAT) {
    17b4:	10 c8 bf    	mov.b     0x810, WREG
    17b6:	00 80 fb    	ze        w0, w0
    17b8:	e2 0f 50    	sub.w     w0, #0x2, [w15]
    17ba:	03 00 32    	bra       Z, 0x17c2 <.L87>
    17bc:	e3 0f 50    	sub.w     w0, #0x3, [w15]
    17be:	12 00 32    	bra       Z, 0x17e4 <.L88>
    17c0:	9f 00 37    	bra       0x1900 <.L138>

000017c2 <.L87>:
                        case ADDRESS_STATE:
                            if (!(USB_setup.wIndex.b[0] & 0x0F)) {  // get EP, strip off direction bit, and see if its EP0
    17c2:	40 80 20    	mov.w     #0x804, w0
    17c4:	40 40 90    	mov.b     [w0+4], w0
    17c6:	00 80 fb    	ze        w0, w0
    17c8:	6f 00 60    	and.w     w0, #0xf, w0
    17ca:	00 00 e0    	cp0.w     w0
    17cc:	07 00 3a    	bra       NZ, 0x17dc <.L89>
                                BD[EP0IN].bytecount = 0;
    17ce:	40 a0 20    	mov.w     #0xa04, w0
    17d0:	80 40 eb    	clr.b     w1
    17d2:	01 48 78    	mov.b     w1, [w0]
                                BD[EP0IN].status = UOWN | DTS | DTSEN;  // send packet as DATA1, set UOWN bit
    17d4:	50 a0 20    	mov.w     #0xa05, w0
    17d6:	81 cc b3    	mov.b     #0xc8, w1
    17d8:	01 48 78    	mov.b     w1, [w0]
    17da:	03 00 37    	bra       0x17e2 <.L90>

000017dc <.L89>:
                            } else {
                                USB_error_flags |= REQUEST_ERROR;
    17dc:	0c c8 bf    	mov.b     0x80c, WREG
    17de:	00 04 a0    	bset.b    w0, #0x0
    17e0:	0c e8 b7    	mov.b     WREG, 0x80c

000017e2 <.L90>:
                            }
                            break;
    17e2:	91 00 37    	bra       0x1906 <.L91>

000017e4 <.L88>:
                        case CONFIG_STATE:
                            U1EP = (uint16_t *)&U1EP0;
    17e4:	a0 4a 20    	mov.w     #0x4aa, w0
    17e6:	00 0f 78    	mov.w     w0, [w14]
                            if (ep = USB_setup.wIndex.b[0] & 0x0F) {    // get EP and strip off direction bit for offset from U1EP0, if not EP0...
    17e8:	40 80 20    	mov.w     #0x804, w0
    17ea:	40 40 90    	mov.b     [w0+4], w0
    17ec:	6f 40 60    	and.b     w0, #0xf, w0
    17ee:	20 47 98    	mov.b     w0, [w14+2]
    17f0:	2e 40 90    	mov.b     [w14+2], w0
    17f2:	00 04 e0    	cp0.b     w0
    17f4:	79 00 32    	bra       Z, 0x18e8 <.L92>
                                buf_desc_ptr = &BD[(ep << 1) | ((USB_setup.wIndex.b[0] & 0x80) ? 0x01 : 0x00)]; // compute pointer to the buffer descriptor for the specified EP
    17f6:	2e 40 90    	mov.b     [w14+2], w0
    17f8:	00 80 fb    	ze        w0, w0
    17fa:	00 00 40    	add.w     w0, w0, w0
    17fc:	80 00 78    	mov.w     w0, w1
    17fe:	40 80 20    	mov.w     #0x804, w0
    1800:	40 40 90    	mov.b     [w0+4], w0
    1802:	00 00 fb    	se        w0, w0
    1804:	4f 00 de    	lsr.w     w0, #0xf, w0
    1806:	01 00 70    	ior.w     w0, w1, w0
    1808:	c2 00 dd    	sl.w      w0, #0x2, w1
    180a:	00 a0 20    	mov.w     #0xa00, w0
    180c:	00 80 40    	add.w     w1, w0, w0
    180e:	20 07 98    	mov.w     w0, [w14+4]
                                if (USB_setup.wIndex.b[0] & 0x80) { // if the specified EP direction is IN...
    1810:	40 80 20    	mov.w     #0x804, w0
    1812:	40 40 90    	mov.b     [w0+4], w0
    1814:	00 04 e0    	cp0.b     w0
    1816:	30 00 3d    	bra       GE, 0x1878 <.L93>
                                    if (U1EP[ep] & 0x04) {          // if EPn is enabled for IN transfers...
    1818:	2e 40 90    	mov.b     [w14+2], w0
    181a:	00 80 fb    	ze        w0, w0
    181c:	00 00 40    	add.w     w0, w0, w0
    181e:	1e 00 40    	add.w     w0, [w14], w0
    1820:	10 00 78    	mov.w     [w0], w0
    1822:	64 00 60    	and.w     w0, #0x4, w0
    1824:	00 00 e0    	cp0.w     w0
    1826:	24 00 32    	bra       Z, 0x1870 <.L94>
                                        if (USB_setup.bRequest == CLEAR_FEATURE) {
    1828:	40 80 20    	mov.w     #0x804, w0
    182a:	10 40 90    	mov.b     [w0+1], w0
    182c:	e1 4f 50    	sub.b     w0, #0x1, [w15]
    182e:	19 00 3a    	bra       NZ, 0x1862 <.L95>
                                            U1EP[ep] &= 0xFD;       // clear EPSTALL bit of U1EPn register
    1830:	2e 40 90    	mov.b     [w14+2], w0
    1832:	00 80 fb    	ze        w0, w0
    1834:	00 00 40    	add.w     w0, w0, w0
    1836:	9e 00 40    	add.w     w0, [w14], w1
    1838:	2e 40 90    	mov.b     [w14+2], w0
    183a:	00 80 fb    	ze        w0, w0
    183c:	00 00 40    	add.w     w0, w0, w0
    183e:	1e 00 40    	add.w     w0, [w14], w0
    1840:	10 01 78    	mov.w     [w0], w2
    1842:	d0 0f 20    	mov.w     #0xfd, w0
    1844:	00 00 61    	and.w     w2, w0, w0
    1846:	80 08 78    	mov.w     w0, [w1]
                                            buf_desc_ptr->status &= ~BSTALL;
    1848:	2e 00 90    	mov.w     [w14+4], w0
    184a:	10 40 90    	mov.b     [w0+1], w0
    184c:	80 40 78    	mov.b     w0, w1
    184e:	01 24 a1    	bclr.b    w1, #0x2
    1850:	2e 00 90    	mov.w     [w14+4], w0
    1852:	11 40 98    	mov.b     w1, [w0+1]
                                            buf_desc_ptr->status |= DTS;
    1854:	2e 00 90    	mov.w     [w14+4], w0
    1856:	10 40 90    	mov.b     [w0+1], w0
    1858:	80 40 78    	mov.b     w0, w1
    185a:	01 64 a0    	bset.b    w1, #0x6
    185c:	2e 00 90    	mov.w     [w14+4], w0
    185e:	11 40 98    	mov.b     w1, [w0+1]
    1860:	43 00 37    	bra       0x18e8 <.L92>

00001862 <.L95>:
                                        } else {
                                            buf_desc_ptr->status |= BSTALL;
    1862:	2e 00 90    	mov.w     [w14+4], w0
    1864:	10 40 90    	mov.b     [w0+1], w0
    1866:	80 40 78    	mov.b     w0, w1
    1868:	01 24 a0    	bset.b    w1, #0x2
    186a:	2e 00 90    	mov.w     [w14+4], w0
    186c:	11 40 98    	mov.b     w1, [w0+1]
    186e:	3c 00 37    	bra       0x18e8 <.L92>

00001870 <.L94>:
                                        }
                                    } else {
                                        USB_error_flags |= REQUEST_ERROR;
    1870:	0c c8 bf    	mov.b     0x80c, WREG
    1872:	00 04 a0    	bset.b    w0, #0x0
    1874:	0c e8 b7    	mov.b     WREG, 0x80c
    1876:	38 00 37    	bra       0x18e8 <.L92>

00001878 <.L93>:
                                    }
                                } else {                    // ...otherwise the specified EP direction is OUT, so...
                                    if (U1EP[ep] & 0x08) {  // if the EP is enabled for OUT transfers...
    1878:	2e 40 90    	mov.b     [w14+2], w0
    187a:	00 80 fb    	ze        w0, w0
    187c:	00 00 40    	add.w     w0, w0, w0
    187e:	1e 00 40    	add.w     w0, [w14], w0
    1880:	10 00 78    	mov.w     [w0], w0
    1882:	68 00 60    	and.w     w0, #0x8, w0
    1884:	00 00 e0    	cp0.w     w0
    1886:	2d 00 32    	bra       Z, 0x18e2 <.L96>
                                        if (USB_setup.bRequest == CLEAR_FEATURE) {
    1888:	40 80 20    	mov.w     #0x804, w0
    188a:	10 40 90    	mov.b     [w0+1], w0
    188c:	e1 4f 50    	sub.b     w0, #0x1, [w15]
    188e:	19 00 3a    	bra       NZ, 0x18c2 <.L97>
                                            U1EP[ep] &= 0xFD;       // clear EPSTALL bit of U1EPn register
    1890:	2e 40 90    	mov.b     [w14+2], w0
    1892:	00 80 fb    	ze        w0, w0
    1894:	00 00 40    	add.w     w0, w0, w0
    1896:	9e 00 40    	add.w     w0, [w14], w1
    1898:	2e 40 90    	mov.b     [w14+2], w0
    189a:	00 80 fb    	ze        w0, w0
    189c:	00 00 40    	add.w     w0, w0, w0
    189e:	1e 00 40    	add.w     w0, [w14], w0
    18a0:	10 01 78    	mov.w     [w0], w2
    18a2:	d0 0f 20    	mov.w     #0xfd, w0
    18a4:	00 00 61    	and.w     w2, w0, w0
    18a6:	80 08 78    	mov.w     w0, [w1]
                                            buf_desc_ptr->status &= ~BSTALL;
    18a8:	2e 00 90    	mov.w     [w14+4], w0
    18aa:	10 40 90    	mov.b     [w0+1], w0
    18ac:	80 40 78    	mov.b     w0, w1
    18ae:	01 24 a1    	bclr.b    w1, #0x2
    18b0:	2e 00 90    	mov.w     [w14+4], w0
    18b2:	11 40 98    	mov.b     w1, [w0+1]
                                            buf_desc_ptr->status &= ~DTS;
    18b4:	2e 00 90    	mov.w     [w14+4], w0
    18b6:	10 40 90    	mov.b     [w0+1], w0
    18b8:	80 40 78    	mov.b     w0, w1
    18ba:	01 64 a1    	bclr.b    w1, #0x6
    18bc:	2e 00 90    	mov.w     [w14+4], w0
    18be:	11 40 98    	mov.b     w1, [w0+1]
    18c0:	06 00 37    	bra       0x18ce <.L98>

000018c2 <.L97>:
                                        } else {
                                            buf_desc_ptr->status |= BSTALL;
    18c2:	2e 00 90    	mov.w     [w14+4], w0
    18c4:	10 40 90    	mov.b     [w0+1], w0
    18c6:	80 40 78    	mov.b     w0, w1
    18c8:	01 24 a0    	bset.b    w1, #0x2
    18ca:	2e 00 90    	mov.w     [w14+4], w0
    18cc:	11 40 98    	mov.b     w1, [w0+1]

000018ce <.L98>:
                                        }
                                        buf_desc_ptr->status = (USB_setup.bRequest == CLEAR_FEATURE) ? (UOWN | DTSEN) : (UOWN | BSTALL);
    18ce:	40 80 20    	mov.w     #0x804, w0
    18d0:	10 40 90    	mov.b     [w0+1], w0
    18d2:	e1 4f 50    	sub.b     w0, #0x1, [w15]
    18d4:	02 00 3a    	bra       NZ, 0x18da <.L99>
    18d6:	80 c8 b3    	mov.b     #0x88, w0
    18d8:	01 00 37    	bra       0x18dc <.L100>

000018da <.L99>:
    18da:	40 c8 b3    	mov.b     #0x84, w0

000018dc <.L100>:
    18dc:	ae 00 90    	mov.w     [w14+4], w1
    18de:	90 40 98    	mov.b     w0, [w1+1]
    18e0:	03 00 37    	bra       0x18e8 <.L92>

000018e2 <.L96>:
                                    } else {
                                        USB_error_flags |= REQUEST_ERROR;
    18e2:	0c c8 bf    	mov.b     0x80c, WREG
    18e4:	00 04 a0    	bset.b    w0, #0x0
    18e6:	0c e8 b7    	mov.b     WREG, 0x80c

000018e8 <.L92>:
                                    }
                                }
                            }
                            if (!(USB_error_flags & REQUEST_ERROR)) {   // if there was no Request Error...
    18e8:	0c c8 bf    	mov.b     0x80c, WREG
    18ea:	00 80 fb    	ze        w0, w0
    18ec:	61 00 60    	and.w     w0, #0x1, w0
    18ee:	00 00 e0    	cp0.w     w0
    18f0:	06 00 3a    	bra       NZ, 0x18fe <.L101>
                                BD[EP0IN].bytecount = 0;
    18f2:	40 a0 20    	mov.w     #0xa04, w0
    18f4:	80 40 eb    	clr.b     w1
    18f6:	01 48 78    	mov.b     w1, [w0]
                                BD[EP0IN].status = UOWN | DTS | DTSEN;  // ...send packet as DATA1, set UOWN bit
    18f8:	50 a0 20    	mov.w     #0xa05, w0
    18fa:	81 cc b3    	mov.b     #0xc8, w1
    18fc:	01 48 78    	mov.b     w1, [w0]

000018fe <.L101>:
                            }
                            break;
    18fe:	03 00 37    	bra       0x1906 <.L91>

00001900 <.L138>:
                        default:
                            USB_error_flags |= REQUEST_ERROR;
    1900:	0c c8 bf    	mov.b     0x80c, WREG
    1902:	00 04 a0    	bset.b    w0, #0x0
    1904:	0c e8 b7    	mov.b     WREG, 0x80c

00001906 <.L91>:
                    }
                    break;
    1906:	04 00 37    	bra       0x1910 <.L85>

00001908 <.L136>:
                default:
                    USB_error_flags |= REQUEST_ERROR;
    1908:	0c c8 bf    	mov.b     0x80c, WREG
    190a:	00 04 a0    	bset.b    w0, #0x0
    190c:	0c e8 b7    	mov.b     WREG, 0x80c
            }
            break;
    190e:	fc 00 37    	bra       0x1b08 <.L42>

00001910 <.L85>:
    1910:	fb 00 37    	bra       0x1b08 <.L42>

00001912 <.L46>:
        case SET_ADDRESS:
            if (USB_setup.wValue.b[0] > 0x7F) {     // if new device address is illegal, send Request Error
    1912:	40 80 20    	mov.w     #0x804, w0
    1914:	20 40 90    	mov.b     [w0+2], w0
    1916:	00 04 e0    	cp0.b     w0
    1918:	04 00 3d    	bra       GE, 0x1922 <.L102>
                USB_error_flags |= REQUEST_ERROR;
    191a:	0c c8 bf    	mov.b     0x80c, WREG
    191c:	00 04 a0    	bset.b    w0, #0x0
    191e:	0c e8 b7    	mov.b     WREG, 0x80c
            } else {
                USB_request.setup.bmRequestType = USB_setup.bmRequestType;  // processing a SET_ADDRESS request
                USB_request.setup.bRequest = USB_setup.bRequest;
                USB_request.setup.wValue.w = USB_setup.wValue.w;
                USB_request.setup.wIndex.w = USB_setup.wIndex.w;
                USB_request.setup.wLength.w = USB_setup.wLength.w;
                USB_in_callbacks[0] = usb_set_address_callback;
                BD[EP0IN].bytecount = 0;
                BD[EP0IN].status = UOWN | DTS | DTSEN;  // send packet as DATA1, set UOWN bit
            }
            break;
    1920:	f3 00 37    	bra       0x1b08 <.L42>

00001922 <.L102>:
    1922:	40 80 20    	mov.w     #0x804, w0
    1924:	90 40 78    	mov.b     [w0], w1
    1926:	a0 89 20    	mov.w     #0x89a, w0
    1928:	01 48 78    	mov.b     w1, [w0]
    192a:	40 80 20    	mov.w     #0x804, w0
    192c:	90 40 90    	mov.b     [w0+1], w1
    192e:	b0 89 20    	mov.w     #0x89b, w0
    1930:	01 48 78    	mov.b     w1, [w0]
    1932:	40 80 20    	mov.w     #0x804, w0
    1934:	10 00 90    	mov.w     [w0+2], w0
    1936:	e0 44 88    	mov.w     w0, 0x89c
    1938:	40 80 20    	mov.w     #0x804, w0
    193a:	20 00 90    	mov.w     [w0+4], w0
    193c:	f0 44 88    	mov.w     w0, 0x89e
    193e:	40 80 20    	mov.w     #0x804, w0
    1940:	30 00 90    	mov.w     [w0+6], w0
    1942:	00 45 88    	mov.w     w0, 0x8a0
    1944:	a0 2c 21    	mov.w     #0x12ca, w0
    1946:	40 45 88    	mov.w     w0, 0x8a8
    1948:	40 a0 20    	mov.w     #0xa04, w0
    194a:	80 40 eb    	clr.b     w1
    194c:	01 48 78    	mov.b     w1, [w0]
    194e:	50 a0 20    	mov.w     #0xa05, w0
    1950:	81 cc b3    	mov.b     #0xc8, w1
    1952:	01 48 78    	mov.b     w1, [w0]
    1954:	d9 00 37    	bra       0x1b08 <.L42>

00001956 <.L47>:
        case GET_DESCRIPTOR:
            USB_request.setup.bmRequestType = USB_setup.bmRequestType;  // processing a GET_DESCRIPTOR request
    1956:	40 80 20    	mov.w     #0x804, w0
    1958:	90 40 78    	mov.b     [w0], w1
    195a:	a0 89 20    	mov.w     #0x89a, w0
    195c:	01 48 78    	mov.b     w1, [w0]
            USB_request.setup.bRequest = USB_setup.bRequest;
    195e:	40 80 20    	mov.w     #0x804, w0
    1960:	90 40 90    	mov.b     [w0+1], w1
    1962:	b0 89 20    	mov.w     #0x89b, w0
    1964:	01 48 78    	mov.b     w1, [w0]
            USB_request.setup.wValue.w = USB_setup.wValue.w;
    1966:	40 80 20    	mov.w     #0x804, w0
    1968:	10 00 90    	mov.w     [w0+2], w0
    196a:	e0 44 88    	mov.w     w0, 0x89c
            USB_request.setup.wIndex.w = USB_setup.wIndex.w;
    196c:	40 80 20    	mov.w     #0x804, w0
    196e:	20 00 90    	mov.w     [w0+4], w0
    1970:	f0 44 88    	mov.w     w0, 0x89e
            USB_request.setup.wLength.w = USB_setup.wLength.w;
    1972:	40 80 20    	mov.w     #0x804, w0
    1974:	30 00 90    	mov.w     [w0+6], w0
    1976:	00 45 88    	mov.w     w0, 0x8a0
            switch (USB_setup.wValue.b[1]) {
    1978:	40 80 20    	mov.w     #0x804, w0
    197a:	30 40 90    	mov.b     [w0+3], w0
    197c:	00 80 fb    	ze        w0, w0
    197e:	e2 0f 50    	sub.w     w0, #0x2, [w15]
    1980:	0b 00 32    	bra       Z, 0x1998 <.L106>
    1982:	e3 0f 50    	sub.w     w0, #0x3, [w15]
    1984:	24 00 32    	bra       Z, 0x19ce <.L107>
    1986:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    1988:	37 00 3a    	bra       NZ, 0x19f8 <.L139>
                case DEVICE:
                    USB_request.data_ptr = Device;
    198a:	20 22 29    	mov.w     #0x9222, w0
    198c:	10 45 88    	mov.w     w0, 0x8a2
                    USB_request.bytes_left.w = (uint16_t)USB_request.data_ptr[0];
    198e:	10 45 80    	mov.w     0x8a2, w0
    1990:	10 40 78    	mov.b     [w0], w0
    1992:	00 80 fb    	ze        w0, w0
    1994:	20 45 88    	mov.w     w0, 0x8a4
                    break;
    1996:	39 00 37    	bra       0x1a0a <.L108>

00001998 <.L106>:
                case CONFIGURATION:
                    if (USB_setup.wValue.b[0] < NUM_CONFIGURATIONS) {
    1998:	40 80 20    	mov.w     #0x804, w0
    199a:	20 40 90    	mov.b     [w0+2], w0
    199c:	00 04 e0    	cp0.b     w0
    199e:	13 00 3a    	bra       NZ, 0x19c6 <.L109>
                        USB_request.data_ptr = Configurations[USB_setup.wValue.b[0]];
    19a0:	40 80 20    	mov.w     #0x804, w0
    19a2:	20 40 90    	mov.b     [w0+2], w0
    19a4:	00 80 fb    	ze        w0, w0
    19a6:	80 00 40    	add.w     w0, w0, w1
    19a8:	60 24 29    	mov.w     #0x9246, w0
    19aa:	00 80 40    	add.w     w1, w0, w0
    19ac:	10 00 78    	mov.w     [w0], w0
    19ae:	10 45 88    	mov.w     w0, 0x8a2
                        USB_request.bytes_left.b[0] = USB_request.data_ptr[2];  // wTotalLength starting at an offset of 2
    19b0:	10 45 80    	mov.w     0x8a2, w0
    19b2:	00 80 e8    	inc2.w    w0, w0
    19b4:	90 40 78    	mov.b     [w0], w1
    19b6:	40 8a 20    	mov.w     #0x8a4, w0
    19b8:	01 48 78    	mov.b     w1, [w0]
                        USB_request.bytes_left.b[1] = USB_request.data_ptr[3];
    19ba:	10 45 80    	mov.w     0x8a2, w0
    19bc:	63 00 40    	add.w     w0, #0x3, w0
    19be:	90 40 78    	mov.b     [w0], w1
    19c0:	50 8a 20    	mov.w     #0x8a5, w0
    19c2:	01 48 78    	mov.b     w1, [w0]
                    } else
                        USB_error_flags |= REQUEST_ERROR;
                    break;
    19c4:	22 00 37    	bra       0x1a0a <.L108>

000019c6 <.L109>:
    19c6:	0c c8 bf    	mov.b     0x80c, WREG
    19c8:	00 04 a0    	bset.b    w0, #0x0
    19ca:	0c e8 b7    	mov.b     WREG, 0x80c
    19cc:	1e 00 37    	bra       0x1a0a <.L108>

000019ce <.L107>:
                case STRING:
                    if (USB_setup.wValue.b[0] < NUM_STRINGS) {
    19ce:	40 80 20    	mov.w     #0x804, w0
    19d0:	20 40 90    	mov.b     [w0+2], w0
    19d2:	e3 4f 50    	sub.b     w0, #0x3, [w15]
    19d4:	0d 00 3e    	bra       GTU, 0x19f0 <.L111>
                        USB_request.data_ptr = Strings[USB_setup.wValue.b[0]];
    19d6:	40 80 20    	mov.w     #0x804, w0
    19d8:	20 40 90    	mov.b     [w0+2], w0
    19da:	00 80 fb    	ze        w0, w0
    19dc:	80 00 40    	add.w     w0, w0, w1
    19de:	60 28 29    	mov.w     #0x9286, w0
    19e0:	00 80 40    	add.w     w1, w0, w0
    19e2:	10 00 78    	mov.w     [w0], w0
    19e4:	10 45 88    	mov.w     w0, 0x8a2
                        USB_request.bytes_left.w = (uint16_t)USB_request.data_ptr[0];
    19e6:	10 45 80    	mov.w     0x8a2, w0
    19e8:	10 40 78    	mov.b     [w0], w0
    19ea:	00 80 fb    	ze        w0, w0
    19ec:	20 45 88    	mov.w     w0, 0x8a4
                    } else
                        USB_error_flags |= REQUEST_ERROR;
                    break;
    19ee:	0d 00 37    	bra       0x1a0a <.L108>

000019f0 <.L111>:
    19f0:	0c c8 bf    	mov.b     0x80c, WREG
    19f2:	00 04 a0    	bset.b    w0, #0x0
    19f4:	0c e8 b7    	mov.b     WREG, 0x80c
    19f6:	09 00 37    	bra       0x1a0a <.L108>

000019f8 <.L139>:
                default:
                    if (USB_get_descriptor_callback)
    19f8:	a0 40 80    	mov.w     0x814, w0
    19fa:	00 00 e0    	cp0.w     w0
    19fc:	03 00 32    	bra       Z, 0x1a04 <.L113>
                        USB_get_descriptor_callback();
    19fe:	a0 40 80    	mov.w     0x814, w0
    1a00:	00 00 01    	call      w0
    1a02:	03 00 37    	bra       0x1a0a <.L108>

00001a04 <.L113>:
                    else
                        USB_error_flags |= REQUEST_ERROR;
    1a04:	0c c8 bf    	mov.b     0x80c, WREG
    1a06:	00 04 a0    	bset.b    w0, #0x0
    1a08:	0c e8 b7    	mov.b     WREG, 0x80c

00001a0a <.L108>:
            }
            if (!(USB_error_flags & REQUEST_ERROR)) {
    1a0a:	0c c8 bf    	mov.b     0x80c, WREG
    1a0c:	00 80 fb    	ze        w0, w0
    1a0e:	61 00 60    	and.w     w0, #0x1, w0
    1a10:	00 00 e0    	cp0.w     w0
    1a12:	79 00 3a    	bra       NZ, 0x1b06 <.L144>
                USB_in_callbacks[0] = usb_send_data_packet;
    1a14:	c0 b0 21    	mov.w     #0x1b0c, w0
    1a16:	40 45 88    	mov.w     w0, 0x8a8
                if (USB_setup.wLength.w < USB_request.bytes_left.w)
    1a18:	40 80 20    	mov.w     #0x804, w0
    1a1a:	b0 00 90    	mov.w     [w0+6], w1
    1a1c:	20 45 80    	mov.w     0x8a4, w0
    1a1e:	80 8f 50    	sub.w     w1, w0, [w15]
    1a20:	03 00 31    	bra       C, 0x1a28 <.L115>
                    USB_request.bytes_left.w = USB_setup.wLength.w;
    1a22:	40 80 20    	mov.w     #0x804, w0
    1a24:	30 00 90    	mov.w     [w0+6], w0
    1a26:	20 45 88    	mov.w     w0, 0x8a4

00001a28 <.L115>:
                usb_send_data_packet();
    1a28:	71 00 07    	rcall     0x1b0c <_usb_send_data_packet> <.LFB7> <.LFE6>
            }
            break;
    1a2a:	6e 00 37    	bra       0x1b08 <.L42>

00001a2c <.L48>:
        case GET_CONFIGURATION:
            BD[EP0IN].address[0] = USB_curr_config; // copy current device configuration to EP0 IN buffer
    1a2c:	30 50 80    	mov.w     0xa06, w0
    1a2e:	d1 80 20    	mov.w     #0x80d, w1
    1a30:	91 40 78    	mov.b     [w1], w1
    1a32:	01 48 78    	mov.b     w1, [w0]
            BD[EP0IN].bytecount = 1;
    1a34:	40 a0 20    	mov.w     #0xa04, w0
    1a36:	11 c0 b3    	mov.b     #0x1, w1
    1a38:	01 48 78    	mov.b     w1, [w0]
            BD[EP0IN].status = UOWN | DTS | DTSEN;  // send packet as DATA1, set UOWN bit
    1a3a:	50 a0 20    	mov.w     #0xa05, w0
    1a3c:	81 cc b3    	mov.b     #0xc8, w1
    1a3e:	01 48 78    	mov.b     w1, [w0]
            break;
    1a40:	63 00 37    	bra       0x1b08 <.L42>

00001a42 <.L49>:
        case SET_CONFIGURATION:
            if (USB_setup.wValue.b[0] <= NUM_CONFIGURATIONS) {
    1a42:	40 80 20    	mov.w     #0x804, w0
    1a44:	20 40 90    	mov.b     [w0+2], w0
    1a46:	e1 4f 50    	sub.b     w0, #0x1, [w15]
    1a48:	1a 00 3e    	bra       GTU, 0x1a7e <.L116>
                usb_disable_endpoints(1);           // disable all endpoints except EP0
    1a4a:	10 c0 b3    	mov.b     #0x1, w0
    1a4c:	1f fc 07    	rcall     0x128c <_usb_disable_endpoints> <.L0> <.LFB1> <.Ltext0>
                switch (USB_curr_config = USB_setup.wValue.b[0]) {
    1a4e:	40 80 20    	mov.w     #0x804, w0
    1a50:	20 40 90    	mov.b     [w0+2], w0
    1a52:	0d e8 b7    	mov.b     WREG, 0x80d
    1a54:	0d c8 bf    	mov.b     0x80d, WREG
    1a56:	00 80 fb    	ze        w0, w0
    1a58:	00 00 e0    	cp0.w     w0
    1a5a:	03 00 3a    	bra       NZ, 0x1a62 <.L140>
                    case 0:
                        USB_USWSTAT = ADDRESS_STATE;
    1a5c:	20 c0 b3    	mov.b     #0x2, w0
    1a5e:	10 e8 b7    	mov.b     WREG, 0x810
                        break;
    1a60:	07 00 37    	bra       0x1a70 <.L119>

00001a62 <.L140>:
                    default:
                        USB_USWSTAT = CONFIG_STATE;
    1a62:	30 c0 b3    	mov.b     #0x3, w0
    1a64:	10 e8 b7    	mov.b     WREG, 0x810
                        if (USB_set_config_callback)
    1a66:	90 40 80    	mov.w     0x812, w0
    1a68:	00 00 e0    	cp0.w     w0
    1a6a:	02 00 32    	bra       Z, 0x1a70 <.L119>
                            USB_set_config_callback();
    1a6c:	90 40 80    	mov.w     0x812, w0
    1a6e:	00 00 01    	call      w0

00001a70 <.L119>:
                }
                BD[EP0IN].bytecount = 0;
    1a70:	40 a0 20    	mov.w     #0xa04, w0
    1a72:	80 40 eb    	clr.b     w1
    1a74:	01 48 78    	mov.b     w1, [w0]
                BD[EP0IN].status = UOWN | DTS | DTSEN;  // send packet as DATA1, set UOWN bit
    1a76:	50 a0 20    	mov.w     #0xa05, w0
    1a78:	81 cc b3    	mov.b     #0xc8, w1
    1a7a:	01 48 78    	mov.b     w1, [w0]
            } else {
                USB_error_flags |= REQUEST_ERROR;
            }
            break;
    1a7c:	45 00 37    	bra       0x1b08 <.L42>

00001a7e <.L116>:
    1a7e:	0c c8 bf    	mov.b     0x80c, WREG
    1a80:	00 04 a0    	bset.b    w0, #0x0
    1a82:	0c e8 b7    	mov.b     WREG, 0x80c
    1a84:	41 00 37    	bra       0x1b08 <.L42>

00001a86 <.L50>:
        case GET_INTERFACE:
            switch (USB_USWSTAT) {
    1a86:	10 c8 bf    	mov.b     0x810, WREG
    1a88:	00 80 fb    	ze        w0, w0
    1a8a:	e3 0f 50    	sub.w     w0, #0x3, [w15]
    1a8c:	13 00 3a    	bra       NZ, 0x1ab4 <.L141>
                case CONFIG_STATE:
                    if (USB_setup.wIndex.b[0] < NUM_INTERFACES) {
    1a8e:	40 80 20    	mov.w     #0x804, w0
    1a90:	40 40 90    	mov.b     [w0+4], w0
    1a92:	00 04 e0    	cp0.b     w0
    1a94:	0a 00 3a    	bra       NZ, 0x1aaa <.L123>
                        BD[EP0IN].address[0] = 0;   // always send back 0 for bAlternateSetting
    1a96:	30 50 80    	mov.w     0xa06, w0
    1a98:	80 40 eb    	clr.b     w1
    1a9a:	01 48 78    	mov.b     w1, [w0]
                        BD[EP0IN].bytecount = 1;
    1a9c:	40 a0 20    	mov.w     #0xa04, w0
    1a9e:	11 c0 b3    	mov.b     #0x1, w1
    1aa0:	01 48 78    	mov.b     w1, [w0]
                        BD[EP0IN].status = UOWN | DTS | DTSEN;  // send packet as DATA1, set UOWN bit
    1aa2:	50 a0 20    	mov.w     #0xa05, w0
    1aa4:	81 cc b3    	mov.b     #0xc8, w1
    1aa6:	01 48 78    	mov.b     w1, [w0]
    1aa8:	03 00 37    	bra       0x1ab0 <.L124>

00001aaa <.L123>:
                    } else {
                        USB_error_flags |= REQUEST_ERROR;
    1aaa:	0c c8 bf    	mov.b     0x80c, WREG
    1aac:	00 04 a0    	bset.b    w0, #0x0
    1aae:	0c e8 b7    	mov.b     WREG, 0x80c

00001ab0 <.L124>:
                    }
                    break;
    1ab0:	00 00 00    	nop       
                default:
                    USB_error_flags |= REQUEST_ERROR;
            }
            break;
    1ab2:	2a 00 37    	bra       0x1b08 <.L42>

00001ab4 <.L141>:
    1ab4:	0c c8 bf    	mov.b     0x80c, WREG
    1ab6:	00 04 a0    	bset.b    w0, #0x0
    1ab8:	0c e8 b7    	mov.b     WREG, 0x80c
    1aba:	26 00 37    	bra       0x1b08 <.L42>

00001abc <.L51>:
        case SET_INTERFACE:
            switch (USB_USWSTAT) {
    1abc:	10 c8 bf    	mov.b     0x810, WREG
    1abe:	00 80 fb    	ze        w0, w0
    1ac0:	e3 0f 50    	sub.w     w0, #0x3, [w15]
    1ac2:	19 00 3a    	bra       NZ, 0x1af6 <.L142>
                case CONFIG_STATE:
                    if (USB_setup.wIndex.b[0] < NUM_INTERFACES) {
    1ac4:	40 80 20    	mov.w     #0x804, w0
    1ac6:	40 40 90    	mov.b     [w0+4], w0
    1ac8:	00 04 e0    	cp0.b     w0
    1aca:	10 00 3a    	bra       NZ, 0x1aec <.L128>
                        switch (USB_setup.wValue.b[0]) {
    1acc:	40 80 20    	mov.w     #0x804, w0
    1ace:	20 40 90    	mov.b     [w0+2], w0
    1ad0:	00 80 fb    	ze        w0, w0
    1ad2:	00 00 e0    	cp0.w     w0
    1ad4:	07 00 3a    	bra       NZ, 0x1ae4 <.L143>
                            case 0:                 // currently support only bAlternateSetting of 0
                                BD[EP0IN].bytecount = 0;
    1ad6:	40 a0 20    	mov.w     #0xa04, w0
    1ad8:	80 40 eb    	clr.b     w1
    1ada:	01 48 78    	mov.b     w1, [w0]
                                BD[EP0IN].status = UOWN | DTS | DTSEN;  // send packet as DATA1, set UOWN bit
    1adc:	50 a0 20    	mov.w     #0xa05, w0
    1ade:	81 cc b3    	mov.b     #0xc8, w1
    1ae0:	01 48 78    	mov.b     w1, [w0]
                                break;
    1ae2:	07 00 37    	bra       0x1af2 <.L132>

00001ae4 <.L143>:
                            default:
                                USB_error_flags |= REQUEST_ERROR;
    1ae4:	0c c8 bf    	mov.b     0x80c, WREG
    1ae6:	00 04 a0    	bset.b    w0, #0x0
    1ae8:	0c e8 b7    	mov.b     WREG, 0x80c
    1aea:	03 00 37    	bra       0x1af2 <.L132>

00001aec <.L128>:
                        }
                    } else {
                        USB_error_flags |= REQUEST_ERROR;
    1aec:	0c c8 bf    	mov.b     0x80c, WREG
    1aee:	00 04 a0    	bset.b    w0, #0x0
    1af0:	0c e8 b7    	mov.b     WREG, 0x80c

00001af2 <.L132>:
                    }
                    break;
    1af2:	00 00 00    	nop       
                default:
                    USB_error_flags |= REQUEST_ERROR;
            }
            break;
    1af4:	09 00 37    	bra       0x1b08 <.L42>

00001af6 <.L142>:
    1af6:	0c c8 bf    	mov.b     0x80c, WREG
    1af8:	00 04 a0    	bset.b    w0, #0x0
    1afa:	0c e8 b7    	mov.b     WREG, 0x80c
    1afc:	05 00 37    	bra       0x1b08 <.L42>

00001afe <.L43>:
        case SET_DESCRIPTOR:
        case SYNCH_FRAME:
        default:
            USB_error_flags |= REQUEST_ERROR;
    1afe:	0c c8 bf    	mov.b     0x80c, WREG
    1b00:	00 04 a0    	bset.b    w0, #0x0
    1b02:	0c e8 b7    	mov.b     WREG, 0x80c
    1b04:	01 00 37    	bra       0x1b08 <.L42>

00001b06 <.L144>:
    1b06:	00 00 00    	nop       

00001b08 <.L42>:
    }
}
    1b08:	00 80 fa    	ulnk      
    1b0a:	00 00 06    	return    

00001b0c <_usb_send_data_packet>:

void usb_send_data_packet(void) {
    1b0c:	02 00 fa    	lnk       #0x2
    uint8_t packet_length, i;

    if (USB_request.bytes_left.w < MAX_PACKET_SIZE) {
    1b0e:	21 45 80    	mov.w     0x8a4, w1
    1b10:	f0 03 20    	mov.w     #0x3f, w0
    1b12:	80 8f 50    	sub.w     w1, w0, [w15]
    1b14:	05 00 3e    	bra       GTU, 0x1b20 <.L146>
        packet_length = (uint8_t)USB_request.bytes_left.w;
    1b16:	20 45 80    	mov.w     0x8a4, w0
    1b18:	00 4f 78    	mov.b     w0, [w14]
        USB_request.bytes_left.w = 0;
    1b1a:	00 00 eb    	clr.w     w0
    1b1c:	20 45 88    	mov.w     w0, 0x8a4
    1b1e:	05 00 37    	bra       0x1b2a <.L147>

00001b20 <.L146>:
    } else {
        packet_length = MAX_PACKET_SIZE;
    1b20:	00 c4 b3    	mov.b     #0x40, w0
    1b22:	00 4f 78    	mov.b     w0, [w14]
        USB_request.bytes_left.w -= MAX_PACKET_SIZE;
    1b24:	20 45 80    	mov.w     0x8a4, w0
    1b26:	00 04 b1    	sub.w     #0x40, w0
    1b28:	20 45 88    	mov.w     w0, 0x8a4

00001b2a <.L147>:
    }
    for (i = 0; i < packet_length; i++) {
    1b2a:	00 40 eb    	clr.b     w0
    1b2c:	10 47 98    	mov.b     w0, [w14+1]
    1b2e:	0c 00 37    	bra       0x1b48 <.L148>

00001b30 <.L149>:
        BD[EP0IN].address[i] = *USB_request.data_ptr++;
    1b30:	31 50 80    	mov.w     0xa06, w1
    1b32:	1e 40 90    	mov.b     [w14+1], w0
    1b34:	00 80 fb    	ze        w0, w0
    1b36:	80 80 40    	add.w     w1, w0, w1
    1b38:	10 45 80    	mov.w     0x8a2, w0
    1b3a:	10 41 78    	mov.b     [w0], w2
    1b3c:	82 48 78    	mov.b     w2, [w1]
    1b3e:	00 00 e8    	inc.w     w0, w0
    1b40:	10 45 88    	mov.w     w0, 0x8a2
    1b42:	1e 40 90    	mov.b     [w14+1], w0
    1b44:	00 40 e8    	inc.b     w0, w0
    1b46:	10 47 98    	mov.b     w0, [w14+1]

00001b48 <.L148>:
    1b48:	1e 40 90    	mov.b     [w14+1], w0
    1b4a:	9e 4f 50    	sub.b     w0, [w14], [w15]
    1b4c:	f1 ff 39    	bra       NC, 0x1b30 <.L149>
    }
    BD[EP0IN].bytecount = packet_length;
    1b4e:	40 a0 20    	mov.w     #0xa04, w0
    1b50:	1e 48 78    	mov.b     [w14], [w0]
    BD[EP0IN].status = ((BD[EP0IN].status ^ DTS) & DTS) | UOWN | DTSEN; // toggle the DATA01 bit, clear the PIDs bits, and set the UOWN and DTS bits
    1b52:	50 a0 20    	mov.w     #0xa05, w0
    1b54:	10 40 78    	mov.b     [w0], w0
    1b56:	00 c0 ea    	com.b     w0, w0
    1b58:	02 c4 b3    	mov.b     #0x40, w2
    1b5a:	82 40 60    	and.b     w0, w2, w1
    1b5c:	80 c8 b3    	mov.b     #0x88, w0
    1b5e:	00 c0 70    	ior.b     w1, w0, w0
    1b60:	80 40 78    	mov.b     w0, w1
    1b62:	50 a0 20    	mov.w     #0xa05, w0
    1b64:	01 48 78    	mov.b     w1, [w0]
    if (USB_request.bytes_left.w == 0) {
    1b66:	20 45 80    	mov.w     0x8a4, w0
    1b68:	00 00 e0    	cp0.w     w0
    1b6a:	0f 00 3a    	bra       NZ, 0x1b8a <.L145>
        if (USB_request.done_callback)
    1b6c:	30 45 80    	mov.w     0x8a6, w0
    1b6e:	00 00 e0    	cp0.w     w0
    1b70:	02 00 32    	bra       Z, 0x1b76 <.L151>
            USB_request.done_callback();
    1b72:	30 45 80    	mov.w     0x8a6, w0
    1b74:	00 00 01    	call      w0

00001b76 <.L151>:
        USB_request.setup.bmRequestType = NO_REQUEST;    // sending a short packet, so clear device request
    1b76:	a0 89 20    	mov.w     #0x89a, w0
    1b78:	80 c0 eb    	setm.b    w1
    1b7a:	01 48 78    	mov.b     w1, [w0]
        USB_request.setup.bRequest = NO_REQUEST;
    1b7c:	b0 89 20    	mov.w     #0x89b, w0
    1b7e:	80 c0 eb    	setm.b    w1
    1b80:	01 48 78    	mov.b     w1, [w0]
        USB_request.done_callback = (USB_CALLBACK_T)NULL;
    1b82:	00 00 eb    	clr.w     w0
    1b84:	30 45 88    	mov.w     w0, 0x8a6
        USB_in_callbacks[0] = (USB_CALLBACK_T)NULL;
    1b86:	00 00 eb    	clr.w     w0
    1b88:	40 45 88    	mov.w     w0, 0x8a8

00001b8a <.L145>:
    }
}
    1b8a:	00 80 fa    	ulnk      
    1b8c:	00 00 06    	return    

00001b8e <_usb_receive_data_packet>:

void usb_receive_data_packet(void) {
    1b8e:	02 00 fa    	lnk       #0x2
    uint8_t i;

    for (i = 0; i < BD[EP0OUT].bytecount; i++) {
    1b90:	00 40 eb    	clr.b     w0
    1b92:	00 4f 78    	mov.b     w0, [w14]
    1b94:	09 00 37    	bra       0x1ba8 <.L153>

00001b96 <.L154>:
        *USB_request.data_ptr++ = BD[EP0OUT].address[i];
    1b96:	10 45 80    	mov.w     0x8a2, w0
    1b98:	12 50 80    	mov.w     0xa02, w2
    1b9a:	9e 80 fb    	ze        [w14], w1
    1b9c:	81 00 41    	add.w     w2, w1, w1
    1b9e:	91 40 78    	mov.b     [w1], w1
    1ba0:	01 48 78    	mov.b     w1, [w0]
    1ba2:	00 00 e8    	inc.w     w0, w0
    1ba4:	10 45 88    	mov.w     w0, 0x8a2
    1ba6:	1e 4f e8    	inc.b     [w14], [w14]

00001ba8 <.L153>:
    1ba8:	00 a0 20    	mov.w     #0xa00, w0
    1baa:	10 40 78    	mov.b     [w0], w0
    1bac:	9e 4f 50    	sub.b     w0, [w14], [w15]
    1bae:	f3 ff 3e    	bra       GTU, 0x1b96 <.L154>
    }
    USB_request.bytes_left.w -= BD[EP0OUT].bytecount;
    1bb0:	21 45 80    	mov.w     0x8a4, w1
    1bb2:	00 a0 20    	mov.w     #0xa00, w0
    1bb4:	10 40 78    	mov.b     [w0], w0
    1bb6:	00 80 fb    	ze        w0, w0
    1bb8:	00 80 50    	sub.w     w1, w0, w0
    1bba:	20 45 88    	mov.w     w0, 0x8a4
    if (USB_request.bytes_left.w > 0) {
    1bbc:	20 45 80    	mov.w     0x8a4, w0
    1bbe:	00 00 e0    	cp0.w     w0
    1bc0:	0e 00 32    	bra       Z, 0x1bde <.L155>
        BD[EP0OUT].bytecount = MAX_PACKET_SIZE;
    1bc2:	00 a0 20    	mov.w     #0xa00, w0
    1bc4:	01 c4 b3    	mov.b     #0x40, w1
    1bc6:	01 48 78    	mov.b     w1, [w0]
        BD[EP0OUT].status = ((BD[EP0OUT].status ^ DTS) & DTS) | UOWN | DTSEN;   // toggle the DATA01 bit, clear the PIDs bits, and set the UOWN and DTS bits
    1bc8:	10 a0 20    	mov.w     #0xa01, w0
    1bca:	10 40 78    	mov.b     [w0], w0
    1bcc:	00 c0 ea    	com.b     w0, w0
    1bce:	02 c4 b3    	mov.b     #0x40, w2
    1bd0:	82 40 60    	and.b     w0, w2, w1
    1bd2:	80 c8 b3    	mov.b     #0x88, w0
    1bd4:	00 c0 70    	ior.b     w1, w0, w0
    1bd6:	80 40 78    	mov.b     w0, w1
    1bd8:	10 a0 20    	mov.w     #0xa01, w0
    1bda:	01 48 78    	mov.b     w1, [w0]
    1bdc:	0f 00 37    	bra       0x1bfc <.L152>

00001bde <.L155>:
    } else {
        if (USB_request.done_callback)
    1bde:	30 45 80    	mov.w     0x8a6, w0
    1be0:	00 00 e0    	cp0.w     w0
    1be2:	02 00 32    	bra       Z, 0x1be8 <.L157>
            USB_request.done_callback();
    1be4:	30 45 80    	mov.w     0x8a6, w0
    1be6:	00 00 01    	call      w0

00001be8 <.L157>:
        USB_request.setup.bmRequestType = NO_REQUEST;    // all data received, so clear device request
    1be8:	a0 89 20    	mov.w     #0x89a, w0
    1bea:	80 c0 eb    	setm.b    w1
    1bec:	01 48 78    	mov.b     w1, [w0]
        USB_request.setup.bRequest = NO_REQUEST;
    1bee:	b0 89 20    	mov.w     #0x89b, w0
    1bf0:	80 c0 eb    	setm.b    w1
    1bf2:	01 48 78    	mov.b     w1, [w0]
        USB_request.done_callback = (USB_CALLBACK_T)NULL;
    1bf4:	00 00 eb    	clr.w     w0
    1bf6:	30 45 88    	mov.w     w0, 0x8a6
        USB_out_callbacks[0] = (USB_CALLBACK_T)NULL;
    1bf8:	00 00 eb    	clr.w     w0
    1bfa:	40 46 88    	mov.w     w0, 0x8c8

00001bfc <.L152>:
    }
}
    1bfc:	00 80 fa    	ulnk      
    1bfe:	00 00 06    	return    

00001c00 <_even_parity>:
    1c00:	02 00 fa    	lnk       #0x2
    1c02:	00 0f 78    	mov.w     w0, [w14]
    1c04:	1e 00 78    	mov.w     [w14], w0
    1c06:	48 00 de    	lsr.w     w0, #0x8, w0
    1c08:	1e 0f 68    	xor.w     w0, [w14], [w14]
    1c0a:	1e 00 78    	mov.w     [w14], w0
    1c0c:	44 00 de    	lsr.w     w0, #0x4, w0
    1c0e:	1e 0f 68    	xor.w     w0, [w14], [w14]
    1c10:	1e 00 78    	mov.w     [w14], w0
    1c12:	42 00 de    	lsr.w     w0, #0x2, w0
    1c14:	1e 0f 68    	xor.w     w0, [w14], [w14]
    1c16:	1e 00 78    	mov.w     [w14], w0
    1c18:	00 00 d1    	lsr.w     w0, w0
    1c1a:	1e 0f 68    	xor.w     w0, [w14], [w14]
    1c1c:	9e 00 78    	mov.w     [w14], w1
    1c1e:	61 80 60    	and.w     w1, #0x1, w0
    1c20:	00 80 fa    	ulnk      
    1c22:	00 00 06    	return    

00001c24 <_enc_readReg>:
    1c24:	08 00 fa    	lnk       #0x8
    1c26:	88 9f be    	mov.d     w8, [w15++]
    1c28:	00 04 78    	mov.w     w0, w8
    1c2a:	31 07 98    	mov.w     w1, [w14+6]
    1c2c:	3e 00 90    	mov.w     [w14+6], w0
    1c2e:	00 e0 a0    	bset.w    w0, #0xe
    1c30:	10 07 98    	mov.w     w0, [w14+2]
    1c32:	9e 04 90    	mov.w     [w14+2], w9
    1c34:	1e 00 90    	mov.w     [w14+2], w0
    1c36:	e4 ff 07    	rcall     0x1c00 <_even_parity> <.L0> <.LFB0> <.LFE8> <.Letext0> <.Ltext0>
    1c38:	4f 00 dd    	sl.w      w0, #0xf, w0
    1c3a:	09 00 70    	ior.w     w0, w9, w0
    1c3c:	10 07 98    	mov.w     w0, [w14+2]
    1c3e:	ea a2 a9    	bclr.b    0x2ea, #0x5
    1c40:	3e 40 90    	mov.b     [w14+3], w0
    1c42:	00 80 fb    	ze        w0, w0
    1c44:	40 13 88    	mov.w     w0, 0x268
    1c46:	00 00 00    	nop       

00001c48 <.L3>:
    1c48:	00 13 80    	mov.w     0x260, w0
    1c4a:	61 00 60    	and.w     w0, #0x1, w0
    1c4c:	00 00 e0    	cp0.w     w0
    1c4e:	fc ff 32    	bra       Z, 0x1c48 <.L3>
    1c50:	41 13 80    	mov.w     0x268, w1
    1c52:	01 0f 78    	mov.w     w1, [w14]
    1c54:	2e 40 90    	mov.b     [w14+2], w0
    1c56:	00 80 fb    	ze        w0, w0
    1c58:	40 13 88    	mov.w     w0, 0x268
    1c5a:	00 00 00    	nop       

00001c5c <.L4>:
    1c5c:	00 13 80    	mov.w     0x260, w0
    1c5e:	61 00 60    	and.w     w0, #0x1, w0
    1c60:	00 00 e0    	cp0.w     w0
    1c62:	fc ff 32    	bra       Z, 0x1c5c <.L4>
    1c64:	41 13 80    	mov.w     0x268, w1
    1c66:	01 0f 78    	mov.w     w1, [w14]
    1c68:	ea a2 a8    	bset.b    0x2ea, #0x5
	...
    1c76:	ea a2 a9    	bclr.b    0x2ea, #0x5
    1c78:	68 22 ef    	clr.w     0x268
    1c7a:	00 00 00    	nop       

00001c7c <.L5>:
    1c7c:	00 13 80    	mov.w     0x260, w0
    1c7e:	61 00 60    	and.w     w0, #0x1, w0
    1c80:	00 00 e0    	cp0.w     w0
    1c82:	fc ff 32    	bra       Z, 0x1c7c <.L5>
    1c84:	40 13 80    	mov.w     0x268, w0
    1c86:	00 40 78    	mov.b     w0, w0
    1c88:	50 47 98    	mov.b     w0, [w14+5]
    1c8a:	68 22 ef    	clr.w     0x268
    1c8c:	00 00 00    	nop       

00001c8e <.L6>:
    1c8e:	00 13 80    	mov.w     0x260, w0
    1c90:	61 00 60    	and.w     w0, #0x1, w0
    1c92:	00 00 e0    	cp0.w     w0
    1c94:	fc ff 32    	bra       Z, 0x1c8e <.L6>
    1c96:	40 13 80    	mov.w     0x268, w0
    1c98:	00 40 78    	mov.b     w0, w0
    1c9a:	40 47 98    	mov.b     w0, [w14+4]
    1c9c:	ea a2 a8    	bset.b    0x2ea, #0x5
    1c9e:	ae 00 90    	mov.w     [w14+4], w1
    1ca0:	01 0c 78    	mov.w     w1, [w8]
    1ca2:	08 00 78    	mov.w     w8, w0
    1ca4:	4f 04 be    	mov.d     [--w15], w8
    1ca6:	00 80 fa    	ulnk      
    1ca8:	00 00 06    	return    

00001caa <_vendor_requests>:
    1caa:	02 00 fa    	lnk       #0x2
    1cac:	40 80 20    	mov.w     #0x804, w0
    1cae:	10 40 90    	mov.b     [w0+1], w0
    1cb0:	00 80 fb    	ze        w0, w0
    1cb2:	cf 80 de    	asr.w     w0, #0xf, w1
    1cb4:	92 00 20    	mov.w     #0x9, w2
    1cb6:	03 00 20    	mov.w     #0x0, w3
    1cb8:	82 0f 50    	sub.w     w0, w2, [w15]
    1cba:	83 8f 58    	subb.w    w1, w3, [w15]
    1cbc:	cb 00 3e    	bra       GTU, 0x1e54 <.L8>
    1cbe:	00 60 01    	bra       w0
    1cc0:	09 00 37    	bra       0x1cd4 <.L9>
    1cc2:	1e 00 37    	bra       0x1d00 <.L10>
    1cc4:	31 00 37    	bra       0x1d28 <.L11>
    1cc6:	45 00 37    	bra       0x1d52 <.L12>
    1cc8:	50 00 37    	bra       0x1d6a <.L13>
    1cca:	60 00 37    	bra       0x1d8c <.L14>
    1ccc:	70 00 37    	bra       0x1dae <.L15>
    1cce:	81 00 37    	bra       0x1dd2 <.L16>
    1cd0:	95 00 37    	bra       0x1dfc <.L17>
    1cd2:	aa 00 37    	bra       0x1e28 <.L18>

00001cd4 <.L9>:
    1cd4:	e1 16 80    	mov.w     0x2dc, w1
    1cd6:	00 08 20    	mov.w     #0x80, w0
    1cd8:	00 80 60    	and.w     w1, w0, w0
    1cda:	00 f0 a7    	btsc.w    w0, #0xf
    1cdc:	00 00 ea    	neg.w     w0, w0
    1cde:	00 00 e9    	dec.w     w0, w0
    1ce0:	4f 00 de    	lsr.w     w0, #0xf, w0
    1ce2:	00 40 78    	mov.b     w0, w0
    1ce4:	00 80 fb    	ze        w0, w0
    1ce6:	61 00 60    	and.w     w0, #0x1, w0
    1ce8:	47 00 dd    	sl.w      w0, #0x7, w0
    1cea:	e1 16 80    	mov.w     0x2dc, w1
    1cec:	01 70 a1    	bclr.w    w1, #0x7
    1cee:	01 00 70    	ior.w     w0, w1, w0
    1cf0:	e0 16 88    	mov.w     w0, 0x2dc
    1cf2:	40 a0 20    	mov.w     #0xa04, w0
    1cf4:	80 40 eb    	clr.b     w1
    1cf6:	01 48 78    	mov.b     w1, [w0]
    1cf8:	50 a0 20    	mov.w     #0xa05, w0
    1cfa:	81 cc b3    	mov.b     #0xc8, w1
    1cfc:	01 48 78    	mov.b     w1, [w0]
    1cfe:	ad 00 37    	bra       0x1e5a <.L7>

00001d00 <.L10>:
    1d00:	60 17 80    	mov.w     0x2ec, w0
    1d02:	61 00 60    	and.w     w0, #0x1, w0
    1d04:	00 f0 a7    	btsc.w    w0, #0xf
    1d06:	00 00 ea    	neg.w     w0, w0
    1d08:	00 00 e9    	dec.w     w0, w0
    1d0a:	4f 00 de    	lsr.w     w0, #0xf, w0
    1d0c:	00 40 78    	mov.b     w0, w0
    1d0e:	00 80 fb    	ze        w0, w0
    1d10:	61 00 60    	and.w     w0, #0x1, w0
    1d12:	61 17 80    	mov.w     0x2ec, w1
    1d14:	01 00 a1    	bclr.w    w1, #0x0
    1d16:	01 00 70    	ior.w     w0, w1, w0
    1d18:	60 17 88    	mov.w     w0, 0x2ec
    1d1a:	40 a0 20    	mov.w     #0xa04, w0
    1d1c:	80 40 eb    	clr.b     w1
    1d1e:	01 48 78    	mov.b     w1, [w0]
    1d20:	50 a0 20    	mov.w     #0xa05, w0
    1d22:	81 cc b3    	mov.b     #0xc8, w1
    1d24:	01 48 78    	mov.b     w1, [w0]
    1d26:	99 00 37    	bra       0x1e5a <.L7>

00001d28 <.L11>:
    1d28:	60 17 80    	mov.w     0x2ec, w0
    1d2a:	62 00 60    	and.w     w0, #0x2, w0
    1d2c:	00 f0 a7    	btsc.w    w0, #0xf
    1d2e:	00 00 ea    	neg.w     w0, w0
    1d30:	00 00 e9    	dec.w     w0, w0
    1d32:	4f 00 de    	lsr.w     w0, #0xf, w0
    1d34:	00 40 78    	mov.b     w0, w0
    1d36:	00 80 fb    	ze        w0, w0
    1d38:	61 00 60    	and.w     w0, #0x1, w0
    1d3a:	00 00 40    	add.w     w0, w0, w0
    1d3c:	61 17 80    	mov.w     0x2ec, w1
    1d3e:	01 10 a1    	bclr.w    w1, #0x1
    1d40:	01 00 70    	ior.w     w0, w1, w0
    1d42:	60 17 88    	mov.w     w0, 0x2ec
    1d44:	40 a0 20    	mov.w     #0xa04, w0
    1d46:	80 40 eb    	clr.b     w1
    1d48:	01 48 78    	mov.b     w1, [w0]
    1d4a:	50 a0 20    	mov.w     #0xa05, w0
    1d4c:	81 cc b3    	mov.b     #0xc8, w1
    1d4e:	01 48 78    	mov.b     w1, [w0]
    1d50:	84 00 37    	bra       0x1e5a <.L7>

00001d52 <.L12>:
    1d52:	30 50 80    	mov.w     0xa06, w0
    1d54:	91 16 80    	mov.w     0x2d2, w1
    1d56:	cf 08 de    	lsr.w     w1, #0xf, w1
    1d58:	81 40 78    	mov.b     w1, w1
    1d5a:	01 48 78    	mov.b     w1, [w0]
    1d5c:	40 a0 20    	mov.w     #0xa04, w0
    1d5e:	11 c0 b3    	mov.b     #0x1, w1
    1d60:	01 48 78    	mov.b     w1, [w0]
    1d62:	50 a0 20    	mov.w     #0xa05, w0
    1d64:	81 cc b3    	mov.b     #0xc8, w1
    1d66:	01 48 78    	mov.b     w1, [w0]
    1d68:	78 00 37    	bra       0x1e5a <.L7>

00001d6a <.L13>:
    1d6a:	30 50 80    	mov.w     0xa06, w0
    1d6c:	92 16 80    	mov.w     0x2d2, w2
    1d6e:	01 00 21    	mov.w     #0x1000, w1
    1d70:	81 00 61    	and.w     w2, w1, w1
    1d72:	01 f0 a7    	btsc.w    w1, #0xf
    1d74:	81 00 ea    	neg.w     w1, w1
    1d76:	81 00 ea    	neg.w     w1, w1
    1d78:	cf 08 de    	lsr.w     w1, #0xf, w1
    1d7a:	81 40 78    	mov.b     w1, w1
    1d7c:	01 48 78    	mov.b     w1, [w0]
    1d7e:	40 a0 20    	mov.w     #0xa04, w0
    1d80:	11 c0 b3    	mov.b     #0x1, w1
    1d82:	01 48 78    	mov.b     w1, [w0]
    1d84:	50 a0 20    	mov.w     #0xa05, w0
    1d86:	81 cc b3    	mov.b     #0xc8, w1
    1d88:	01 48 78    	mov.b     w1, [w0]
    1d8a:	67 00 37    	bra       0x1e5a <.L7>

00001d8c <.L14>:
    1d8c:	30 50 80    	mov.w     0xa06, w0
    1d8e:	52 16 80    	mov.w     0x2ca, w2
    1d90:	01 00 21    	mov.w     #0x1000, w1
    1d92:	81 00 61    	and.w     w2, w1, w1
    1d94:	01 f0 a7    	btsc.w    w1, #0xf
    1d96:	81 00 ea    	neg.w     w1, w1
    1d98:	81 00 ea    	neg.w     w1, w1
    1d9a:	cf 08 de    	lsr.w     w1, #0xf, w1
    1d9c:	81 40 78    	mov.b     w1, w1
    1d9e:	01 48 78    	mov.b     w1, [w0]
    1da0:	40 a0 20    	mov.w     #0xa04, w0
    1da2:	11 c0 b3    	mov.b     #0x1, w1
            BD[EP0IN].status = UOWN | DTS | DTSEN;
            break;
        case READ_SW3:
            BD[EP0IN].address[0] = SW3 ? 1 : 0;
            BD[EP0IN].bytecount = 1;
    1da4:	01 48 78    	mov.b     w1, [w0]
            BD[EP0IN].status = UOWN | DTS | DTSEN;
    1da6:	50 a0 20    	mov.w     #0xa05, w0
    1da8:	81 cc b3    	mov.b     #0xc8, w1
    1daa:	01 48 78    	mov.b     w1, [w0]
            break;
    1dac:	56 00 37    	bra       0x1e5a <.L7>

00001dae <.L15>:
        case ENC_READ_REG:
            temp = enc_readReg(USB_setup.wValue);
    1dae:	40 80 20    	mov.w     #0x804, w0
    1db0:	90 00 90    	mov.w     [w0+2], w1
    1db2:	0e 00 78    	mov.w     w14, w0
    1db4:	37 ff 07    	rcall     0x1c24 <_enc_readReg> <.LFB1> <.LFE0>
            BD[EP0IN].address[0] = temp.b[0];
    1db6:	30 50 80    	mov.w     0xa06, w0
    1db8:	9e 40 78    	mov.b     [w14], w1
    1dba:	01 48 78    	mov.b     w1, [w0]
            BD[EP0IN].address[1] = temp.b[1];
    1dbc:	30 50 80    	mov.w     0xa06, w0
    1dbe:	00 00 e8    	inc.w     w0, w0
    1dc0:	9e 40 90    	mov.b     [w14+1], w1
    1dc2:	01 48 78    	mov.b     w1, [w0]
            BD[EP0IN].bytecount = 2;
    1dc4:	40 a0 20    	mov.w     #0xa04, w0
    1dc6:	21 c0 b3    	mov.b     #0x2, w1
    1dc8:	01 48 78    	mov.b     w1, [w0]
            BD[EP0IN].status = UOWN | DTS | DTSEN;
    1dca:	50 a0 20    	mov.w     #0xa05, w0
    1dcc:	81 cc b3    	mov.b     #0xc8, w1
    1dce:	01 48 78    	mov.b     w1, [w0]
            break;
    1dd0:	44 00 37    	bra       0x1e5a <.L7>

00001dd2 <.L16>:
         case TOGGLE_D5_PWM:
            D5 = !D5;
    1dd2:	50 17 80    	mov.w     0x2ea, w0
    1dd4:	68 00 60    	and.w     w0, #0x8, w0
    1dd6:	00 f0 a7    	btsc.w    w0, #0xf
    1dd8:	00 00 ea    	neg.w     w0, w0
    1dda:	00 00 e9    	dec.w     w0, w0
    1ddc:	4f 00 de    	lsr.w     w0, #0xf, w0
    1dde:	00 40 78    	mov.b     w0, w0
    1de0:	00 80 fb    	ze        w0, w0
    1de2:	61 00 60    	and.w     w0, #0x1, w0
    1de4:	43 00 dd    	sl.w      w0, #0x3, w0
    1de6:	51 17 80    	mov.w     0x2ea, w1
    1de8:	01 30 a1    	bclr.w    w1, #0x3
    1dea:	01 00 70    	ior.w     w0, w1, w0
    1dec:	50 17 88    	mov.w     w0, 0x2ea
            BD[EP0IN].bytecount = 0;
    1dee:	40 a0 20    	mov.w     #0xa04, w0
    1df0:	80 40 eb    	clr.b     w1
    1df2:	01 48 78    	mov.b     w1, [w0]
            BD[EP0IN].status = UOWN | DTS | DTSEN;
    1df4:	50 a0 20    	mov.w     #0xa05, w0
    1df6:	81 cc b3    	mov.b     #0xc8, w1
    1df8:	01 48 78    	mov.b     w1, [w0]
            break;
    1dfa:	2f 00 37    	bra       0x1e5a <.L7>

00001dfc <.L17>:
        case TOGGLE_D6_DIR:
            D6 = !D6;
    1dfc:	d1 16 80    	mov.w     0x2da, w1
    1dfe:	00 10 20    	mov.w     #0x100, w0
    1e00:	00 80 60    	and.w     w1, w0, w0
    1e02:	00 f0 a7    	btsc.w    w0, #0xf
    1e04:	00 00 ea    	neg.w     w0, w0
    1e06:	00 00 e9    	dec.w     w0, w0
    1e08:	4f 00 de    	lsr.w     w0, #0xf, w0
    1e0a:	00 40 78    	mov.b     w0, w0
    1e0c:	00 80 fb    	ze        w0, w0
    1e0e:	61 00 60    	and.w     w0, #0x1, w0
    1e10:	48 00 dd    	sl.w      w0, #0x8, w0
    1e12:	d1 16 80    	mov.w     0x2da, w1
    1e14:	01 80 a1    	bclr.w    w1, #0x8
    1e16:	01 00 70    	ior.w     w0, w1, w0
    1e18:	d0 16 88    	mov.w     w0, 0x2da
            BD[EP0IN].bytecount = 0;
    1e1a:	40 a0 20    	mov.w     #0xa04, w0
    1e1c:	80 40 eb    	clr.b     w1
    1e1e:	01 48 78    	mov.b     w1, [w0]
            BD[EP0IN].status = UOWN | DTS | DTSEN;
    1e20:	50 a0 20    	mov.w     #0xa05, w0
    1e22:	81 cc b3    	mov.b     #0xc8, w1
    1e24:	01 48 78    	mov.b     w1, [w0]
            break;
    1e26:	19 00 37    	bra       0x1e5a <.L7>

00001e28 <.L18>:
        case TOGGLE_D7_EN:
            D7 = !D7;
    1e28:	d1 16 80    	mov.w     0x2da, w1
    1e2a:	00 80 20    	mov.w     #0x800, w0
    1e2c:	00 80 60    	and.w     w1, w0, w0
    1e2e:	00 f0 a7    	btsc.w    w0, #0xf
    1e30:	00 00 ea    	neg.w     w0, w0
    1e32:	00 00 e9    	dec.w     w0, w0
    1e34:	4f 00 de    	lsr.w     w0, #0xf, w0
    1e36:	00 40 78    	mov.b     w0, w0
    1e38:	00 80 fb    	ze        w0, w0
    1e3a:	61 00 60    	and.w     w0, #0x1, w0
    1e3c:	4b 00 dd    	sl.w      w0, #0xb, w0
    1e3e:	d1 16 80    	mov.w     0x2da, w1
    1e40:	01 b0 a1    	bclr.w    w1, #0xb
    1e42:	01 00 70    	ior.w     w0, w1, w0
    1e44:	d0 16 88    	mov.w     w0, 0x2da
            BD[EP0IN].bytecount = 0;
    1e46:	40 a0 20    	mov.w     #0xa04, w0
    1e48:	80 40 eb    	clr.b     w1
    1e4a:	01 48 78    	mov.b     w1, [w0]
            BD[EP0IN].status = UOWN | DTS | DTSEN;
    1e4c:	50 a0 20    	mov.w     #0xa05, w0
    1e4e:	81 cc b3    	mov.b     #0xc8, w1
    1e50:	01 48 78    	mov.b     w1, [w0]
            break;
    1e52:	03 00 37    	bra       0x1e5a <.L7>

00001e54 <.L8>:
        default:
            USB_error_flags |= REQUEST_ERROR;
    1e54:	0c c8 bf    	mov.b     0x80c, WREG
    1e56:	00 04 a0    	bset.b    w0, #0x0
    1e58:	0c e8 b7    	mov.b     WREG, 0x80c

00001e5a <.L7>:
    }
}
    1e5a:	00 80 fa    	ulnk      
    1e5c:	00 00 06    	return    

00001e5e <_main>:

int16_t main(void) {
    1e5e:	04 00 fa    	lnk       #0x4
    uint8_t *RPOR, *RPINR;

    init_elecanisms();
    1e60:	3c 00 07    	rcall     0x1eda <_init_elecanisms> <.L0> <.LFB0> <.LFE3> <.Letext0> <.Ltext0>

    // Configure encoder pins and connect them to SPI2
    ENC_CSn_DIR = OUT; ENC_CSn = 1;
    1e62:	e8 a2 a9    	bclr.b    0x2e8, #0x5
    1e64:	ea a2 a8    	bset.b    0x2ea, #0x5
    ENC_SCK_DIR = OUT; ENC_SCK = 0;
    1e66:	e8 82 a9    	bclr.b    0x2e8, #0x4
    1e68:	ea 82 a9    	bclr.b    0x2ea, #0x4
    ENC_MOSI_DIR = OUT; ENC_MOSI = 0;
    1e6a:	d8 a2 a9    	bclr.b    0x2d8, #0x5
    1e6c:	da a2 a9    	bclr.b    0x2da, #0x5
    ENC_MISO_DIR = IN;
    1e6e:	d8 82 a8    	bset.b    0x2d8, #0x4

    RPOR = (uint8_t *)&RPOR0;
    1e70:	00 6c 20    	mov.w     #0x6c0, w0
    1e72:	00 0f 78    	mov.w     w0, [w14]
    RPINR = (uint8_t *)&RPINR0;
    1e74:	00 68 20    	mov.w     #0x680, w0
    1e76:	10 07 98    	mov.w     w0, [w14+2]

    __builtin_write_OSCCONL(OSCCON & 0xBF);
    1e78:	11 3a 80    	mov.w     0x742, w1
    1e7a:	f0 0b 20    	mov.w     #0xbf, w0
    1e7c:	00 81 60    	and.w     w1, w0, w2
    1e7e:	60 04 20    	mov.w     #0x46, w0
    1e80:	71 05 20    	mov.w     #0x57, w1
    1e82:	23 74 20    	mov.w     #0x742, w3
    1e84:	80 49 78    	mov.b     w0, [w3]
    1e86:	81 49 78    	mov.b     w1, [w3]
    1e88:	82 49 78    	mov.b     w2, [w3]
    RPINR[MISO2_RP] = ENC_MISO_RP;
    1e8a:	1e 00 90    	mov.w     [w14+2], w0
    1e8c:	c0 02 b0    	add.w     #0x2c, w0
    1e8e:	91 c1 b3    	mov.b     #0x19, w1
    1e90:	01 48 78    	mov.b     w1, [w0]
    RPOR[ENC_MOSI_RP] = MOSI2_RP;
    1e92:	9e 00 78    	mov.w     [w14], w1
    1e94:	74 80 40    	add.w     w1, #0x14, w0
    1e96:	a1 c0 b3    	mov.b     #0xa, w1
    1e98:	01 48 78    	mov.b     w1, [w0]
    RPOR[ENC_SCK_RP] = SCK2OUT_RP;
    1e9a:	9e 00 78    	mov.w     [w14], w1
    1e9c:	6a 80 40    	add.w     w1, #0xa, w0
    1e9e:	b1 c0 b3    	mov.b     #0xb, w1
    1ea0:	01 48 78    	mov.b     w1, [w0]
    __builtin_write_OSCCONL(OSCCON | 0x40);
    1ea2:	10 3a 80    	mov.w     0x742, w0
    1ea4:	00 01 78    	mov.w     w0, w2
    1ea6:	02 60 a0    	bset.w    w2, #0x6
    1ea8:	60 04 20    	mov.w     #0x46, w0
    1eaa:	71 05 20    	mov.w     #0x57, w1
    1eac:	23 74 20    	mov.w     #0x742, w3
    1eae:	80 49 78    	mov.b     w0, [w3]
    1eb0:	81 49 78    	mov.b     w1, [w3]
    1eb2:	82 49 78    	mov.b     w2, [w3]

    SPI2CON1 = 0x003B;              // SPI2 mode = 1, SCK freq = 8 MHz
    1eb4:	b0 03 20    	mov.w     #0x3b, w0
    1eb6:	10 13 88    	mov.w     w0, 0x262
    SPI2CON2 = 0;
    1eb8:	64 22 ef    	clr.w     0x264
    SPI2STAT = 0x8000;
    1eba:	00 00 28    	mov.w     #0x8000, w0
    1ebc:	00 13 88    	mov.w     w0, 0x260
    D5_DIR = OUT;
    1ebe:	e8 62 a9    	bclr.b    0x2e8, #0x3
    D5 = 0;
    1ec0:	ea 62 a9    	bclr.b    0x2ea, #0x3
    D6_DIR = OUT;
    1ec2:	d9 02 a9    	bclr.b    0x2d9, #0x0
    D6 = 0;
    1ec4:	db 02 a9    	bclr.b    0x2db, #0x0
    D7_DIR = OUT;
    1ec6:	d9 62 a9    	bclr.b    0x2d9, #0x3
    D7 = 0;
    1ec8:	db 62 a9    	bclr.b    0x2db, #0x3

    USB_setup_vendor_callback = vendor_requests;
    1eca:	a0 ca 21    	mov.w     #0x1caa, w0
    1ecc:	c0 40 88    	mov.w     w0, 0x818
    init_usb();
    1ece:	0e fa 07    	rcall     0x12ec <_init_usb> <.LFB3> <.LFE2>

    while (USB_USWSTAT != CONFIG_STATE) {
    1ed0:	00 00 00    	nop       

00001ed2 <.L22>:
    1ed2:	10 c8 bf    	mov.b     0x810, WREG
    1ed4:	e3 4f 50    	sub.b     w0, #0x3, [w15]
    1ed6:	fd ff 3a    	bra       NZ, 0x1ed2 <.L22>

00001ed8 <.L23>:
#ifndef USB_INTERRUPT
        usb_service();
#endif
    }
    while (1) {
#ifndef USB_INTERRUPT
        usb_service();
#endif
    }
    1ed8:	ff ff 37    	bra       .

00001eda <_init_elecanisms>:
*/

#include "elecanisms.h"

void init_elecanisms(void) {
    1eda:	00 00 fa    	lnk       #0x0
    CLKDIV = 0x0100;        // RCDIV = 001 (4MHz, div2), 
    1edc:	00 10 20    	mov.w     #0x100, w0
    1ede:	20 3a 88    	mov.w     w0, 0x744
                            // CPDIV = 00 (FOSC = 32MHz, FCY = 16MHz)

    // Configure all pins on the digital headers to be inputs
    D0_DIR = IN;
    1ee0:	d8 a2 a8    	bset.b    0x2d8, #0x5
    D1_DIR = IN;
    1ee2:	d8 82 a8    	bset.b    0x2d8, #0x4
    D2_DIR = IN;
    1ee4:	e8 82 a8    	bset.b    0x2e8, #0x4
    D3_DIR = IN;
    1ee6:	e8 a2 a8    	bset.b    0x2e8, #0x5
    D4_DIR = IN;
    1ee8:	c9 e2 a8    	bset.b    0x2c9, #0x7
    D5_DIR = IN;
    1eea:	e8 62 a8    	bset.b    0x2e8, #0x3
    D6_DIR = IN;
    1eec:	d9 02 a8    	bset.b    0x2d9, #0x0
    D7_DIR = IN;
    1eee:	d9 62 a8    	bset.b    0x2d9, #0x3
    D8_DIR = IN;
    1ef0:	d9 22 a8    	bset.b    0x2d9, #0x1
    D9_DIR = IN;
    1ef2:	d9 42 a8    	bset.b    0x2d9, #0x2
    D10_DIR = IN;
    1ef4:	d8 02 a8    	bset.b    0x2d8, #0x0
    D11_DIR = IN;
    1ef6:	d8 22 a8    	bset.b    0x2d8, #0x1
    D12_DIR = IN;
    1ef8:	d8 42 a8    	bset.b    0x2d8, #0x2
    D13_DIR = IN;
    1efa:	d8 62 a8    	bset.b    0x2d8, #0x3

    // Configure all pins on the analog header to be inputs
    A0_DIR = IN;
    1efc:	c8 a2 a8    	bset.b    0x2c8, #0x5
    A1_DIR = IN;
    1efe:	c8 82 a8    	bset.b    0x2c8, #0x4
    A2_DIR = IN;
    1f00:	c8 62 a8    	bset.b    0x2c8, #0x3
    A3_DIR = IN;
    1f02:	c8 42 a8    	bset.b    0x2c8, #0x2
    A4_DIR = IN;
    1f04:	c8 22 a8    	bset.b    0x2c8, #0x1
    A5_DIR = IN;
    1f06:	c8 02 a8    	bset.b    0x2c8, #0x0

    // Make all pins digital I/Os except for A0,...,A5
    ANSB = 0x003F;
    1f08:	f0 03 20    	mov.w     #0x3f, w0
    1f0a:	10 27 88    	mov.w     w0, 0x4e2
    ANSC = 0;
    1f0c:	e4 24 ef    	clr.w     0x4e4
    ANSD = 0;
    1f0e:	e6 24 ef    	clr.w     0x4e6
    ANSF = 0;
    1f10:	ea 24 ef    	clr.w     0x4ea
    ANSG = 0;
    1f12:	ec 24 ef    	clr.w     0x4ec

    // Configure and enable the ADC module: 
    //   set output data format to integer (FORM<1:0> = 0b00)
    //   set conversion trigger source select bits to internal counter 
    //     (SSRC<2:0> = 0b111)
    //   set auto-sample time bits to 12*TAD (SAMC<4:0> = 12)
    //   set conversion clock select bits to 64*TCY (ADCS<7:0> = 64)
    //   set initial channel selection to A0
    AD1CON1 = 0x00E0; 
    1f14:	00 0e 20    	mov.w     #0xe0, w0
    1f16:	00 19 88    	mov.w     w0, 0x320
    AD1CON2 = 0;
    1f18:	22 23 ef    	clr.w     0x322
    AD1CON3 = 0x0C40;
    1f1a:	00 c4 20    	mov.w     #0xc40, w0
    1f1c:	20 19 88    	mov.w     w0, 0x324
    AD1CHS = A0_AN;
    1f1e:	50 00 20    	mov.w     #0x5, w0
    1f20:	40 19 88    	mov.w     w0, 0x328
    AD1CON1bits.ADON = 1;
    1f22:	21 e3 a8    	bset.b    0x321, #0x7

    // Configure LED pins as outputs, set to low (off)
    LED1_DIR = OUT; LED1 = 0;
    1f24:	d8 e2 a9    	bclr.b    0x2d8, #0x7
    1f26:	dc e2 a9    	bclr.b    0x2dc, #0x7
    LED2_DIR = OUT; LED2 = 0;
    1f28:	e8 02 a9    	bclr.b    0x2e8, #0x0
    1f2a:	ec 02 a9    	bclr.b    0x2ec, #0x0
    LED3_DIR = OUT; LED3 = 0;
    1f2c:	e8 22 a9    	bclr.b    0x2e8, #0x1
    1f2e:	ec 22 a9    	bclr.b    0x2ec, #0x1

    // Configure SW pins as inputs
    SW1_DIR = IN;
    1f30:	d1 e2 a8    	bset.b    0x2d1, #0x7
    SW2_DIR = IN;
    1f32:	d1 82 a8    	bset.b    0x2d1, #0x4
    SW3_DIR = IN;
    1f34:	c9 82 a8    	bset.b    0x2c9, #0x4
}
    1f36:	00 80 fa    	ulnk      
    1f38:	00 00 06    	return    

00001f3a <_read_analog>:

uint16_t read_analog(uint16_t pin_an) {
    1f3a:	02 00 fa    	lnk       #0x2
    1f3c:	00 0f 78    	mov.w     w0, [w14]
    AD1CHS = pin_an;
    1f3e:	9e 00 78    	mov.w     [w14], w1
    1f40:	41 19 88    	mov.w     w1, 0x328
    AD1CON1bits.SAMP = 1;
    1f42:	20 23 a8    	bset.b    0x320, #0x1
    while (AD1CON1bits.DONE == 0) {}
    1f44:	00 00 00    	nop       

00001f46 <.L3>:
    1f46:	00 19 80    	mov.w     0x320, w0
    1f48:	61 00 60    	and.w     w0, #0x1, w0
    1f4a:	00 00 e0    	cp0.w     w0
    1f4c:	fc ff 32    	bra       Z, 0x1f46 <.L3>
    return ADC1BUF0;
    1f4e:	00 18 80    	mov.w     0x300, w0
}
    1f50:	00 80 fa    	ulnk      
    1f52:	00 00 06    	return    
Disassembly of section .isr.text:

00001f54 <__USB1Interrupt>:
    1f54:	36 00 f8    	push      0x36
    1f56:	80 9f be    	mov.d     w0, [w15++]
    1f58:	82 9f be    	mov.d     w2, [w15++]
    1f5a:	84 9f be    	mov.d     w4, [w15++]
    1f5c:	86 9f be    	mov.d     w6, [w15++]
    1f5e:	32 00 f8    	push      0x32
    1f60:	34 00 f8    	push      0x34
    1f62:	10 00 20    	mov.w     #0x1, w0
    1f64:	a0 01 88    	mov.w     w0, 0x34
    1f66:	00 20 20    	mov.w     #0x200, w0
    1f68:	90 01 88    	mov.w     w0, 0x32
    1f6a:	00 00 fa    	lnk       #0x0
    1f6c:	fc f9 07    	rcall     0x1366 <_usb_service> <.LFB4> <.LFE3>
    1f6e:	00 80 fa    	ulnk      
    1f70:	34 00 f9    	pop       0x34
    1f72:	32 00 f9    	pop       0x32
    1f74:	4f 03 be    	mov.d     [--w15], w6
    1f76:	4f 02 be    	mov.d     [--w15], w4
    1f78:	4f 01 be    	mov.d     [--w15], w2
    1f7a:	4f 00 be    	mov.d     [--w15], w0
    1f7c:	36 00 f9    	pop       0x36
    1f7e:	00 40 06    	retfie    
Disassembly of section .dinit:

00001f80 <.dinit>:
    1f80:	1a 08 00    	nop       
    1f82:	ce 00 00    	nop       
    1f84:	80 00 00    	nop       
    1f86:	00 0a 00    	nop       
    1f88:	80 00 00    	nop       
    1f8a:	80 00 00    	nop       
    1f8c:	00 08 00    	nop       
    1f8e:	1a 00 00    	nop       
    1f90:	80 00 00    	nop       
    1f92:	00 00 00    	nop       
Disassembly of section .isr:

00001f94 <__DefaultInterrupt>:
    1f94:	00 40 da    	break     
    1f96:	00 00 fe    	reset     
